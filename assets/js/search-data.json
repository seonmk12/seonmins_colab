{
  
    
        "post0": {
            "title": "Title",
            "content": ". &#44611;&#54728;&#48652; . 깃허브란 무엇인지 깃허브를 이용한 블로그 만들기 . &#44611;&#54728;&#48652;&#50752; &#44611;&#54728;&#48652; &#45936;&#49828;&#53944;&#53457;. . Git을 사용하는 이유(무료이니까....) . *효과적인 협업 . *손쉬운 개발 및 테스트 환경 구축 . *효율적인 배포관리 분산 . github는? 버전관리 툴인 깃(git)을 사용하는 프로젝트를 지원하는 웹호스팅 서비스. 깃이 텍스트 명령어 입력 방식인데 반해, github는 그래픽 유저 인터페이스(GUI)를 제공(웹사이트에서 사용하는 클라우드 느낌) . GIT 로컬에서 관리되는 버전 관리 시스템(VCS: Version Contral System) . github 협업, 오픈소스를 공유 등은 github를 써서 편리하게 사용 . 기본용어 . 커멘드라인(commanf line): 킷명령어를 입력할 때 사용하는 컴퓨터 프로그램 . 저장소(repository): 프로젝츠의 디렉토리나 저장 공간, 코드 화일, 텍스트 화일, 이미지 화일을 저장 . 버전관리 . 커밋 . 브랜치: 메인프로젝트의 브랜치로 변경하고 싶은 자신만의 버전을 만든다. 작업 후 프로젝트의 메인 &quot;master&quot;에 브랜치를 다시 &quot;merge&quot; --&gt; 사본의 개념 . &#44611;&#54728;&#48652; . 버젼 관리 . 커밋:git에 파일을 추가하거나 변경 내용을 저장(저장 시점) . 푸쉬: 깃허브에 파일을 추가하거나 변경 내용을 저장 . 풀: 깃허브(또는 원격 저장소)에서 파일을 다운로드하는 작업(히드토리까지) . git bash 또는 콘솔에서 git 명령어로 commit/push일일히 작업하는 것보다 편하게 사용 가능 . &#44611;&#54728;&#48652;&#50640;&#49436; &#48652;&#47004;&#52824; &#49373;&#49457; &#47560;&#49828;&#53552; &#49440;&#53469; &#49352;&#47196;&#50868; &#48652;&#47004;&#52824;&#47749; &#51077;&#47141; . 공동작업자 등록 . 깃허브 master 선택 상단 setting 선택 . | manage access --&gt; invite a collaboratoe --&gt; email이나 깃허브 이름으로 초대 . | fastpages &#48660;&#47196;&#44536; . fastpages 공식 레포지토리에서 &#39;use this template&#39; 버튼을 클릭 . fastpages 블로그 파일 관리 . _config.yml:블로그의 이름, 미리보기 여부, 태그 보여주기 여부 등을 설정 . index.html: 블로그 메인 페이지에 보여지는 컨텐츠를 작성하는 파일. . _pages/about.md: 블로그의 자기소개 about페이지의 내용으로 markdown 포멧 . 포스트를 저장하는 디렉토리 구분(_notebooks(주피터 노트북 파일은 여기다가 넣어야 함)/,_posts/,_word/,images/) . 이름 형식은 YYYY-mm-dd-{아무이름}형태로 작성되어야 하며 fastpages가 이를 인식하고 파일을 html로 변환함. .",
            "url": "https://seonmk12.github.io/seonmins_colab/2021/06/06/%ED%8C%80-%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "relUrl": "/2021/06/06/%ED%8C%80-%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ". n = 1 print(n, type(n)) print(id(n)) . 1 &lt;class &#39;int&#39;&gt; 94823992871424 . n = False print(n) print(type(n)) print(id(n)) . False &lt;class &#39;bool&#39;&gt; 94823992197408 . n=[1,2,3] print(n) print(type(n)) print(id(n)) . [1, 2, 3] &lt;class &#39;list&#39;&gt; 140681116838320 . a = &quot;미래의 행복 보다는 &#39;현재의 행복&#39;이 중요하다.&quot; print(a) . 미래의 행복 보다는 &#39;현재의 행복&#39;이 중요하다. . a = 2&gt;5 a . False . a,b,c= 100,50,70 print(a+b+c) . 220 . a,b= &#39;90&#39;, &#39;80&#39; print(a+b) . 9080 . a,b = 90, &#39;80&#39; print(a+b) . TypeError Traceback (most recent call last) &lt;ipython-input-9-07de0b627c3a&gt; in &lt;module&gt;() 1 #숫자열+문자열 --&gt; error 2 a,b = 90, &#39;80&#39; -&gt; 3 print(a+b) TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . a,b = 90, &#39;80&#39; print(a+int(b)) . 170 . name = input(&#39;취미를 입력하세요 :&#39;) print(name, &#39;좋은 취미군요:)&#39;) . 취미를 입력하세요 :축구 축구 좋은 취미군요:) . print(1+2) . 3 . print(1+int(&#39;2&#39;)) . 3 . a = 3 print(a) print(a+70) . 3 73 . print(&#39;helle&#39;,&#39;everyone&#39;) print(&#39;1 더하기 1은&#39;,&#39;귀요미&#39;) a= &#39;김선민&#39; print(&#39;나는&#39;,a,&#39;입니다&#39;) . helle everyone 1 더하기 1은 귀요미 나는 김선민 입니다 . s = input(&#39;좋아하는 운동을 입력하시오. :&#39;) print(f&#39; {s} 은 내일 할 수 있습니다.&#39;) . 좋아하는 운동을 입력하시오. :농구 농구 은 내일 할 수 있습니다. . print(&#39;두 수를 입력받아 더하는 프로그램 입니다.&#39;) f = input(&#39;첫번째 숫자를 입력하시오 :&#39;) s = input(&#39;두번째 숫자를 입력하시오 :&#39;) print(int(f)+int(s)) . 두 수를 입력받아 더하는 프로그램 입니다. 첫번째 숫자를 입력하시오 :5 두번째 숫자를 입력하시오 :7 12 . x=99 y=3 print(x+y) print(x-y) print(x*y) print(x/y) print(x//y) #몫 print(x%y) #나머지 print(+x) print(-x) print(x**y) . 102 96 297 33.0 33 0 99 -99 970299 . print(&#39;섭씨 변환기&#39;) a = input(&#39;화씨온도:&#39;) a = int(a) print(&#39;섭씨온도:&#39;, (a-32)*5/9) . 섭씨 변환기 화씨온도:100 섭씨온도: 37.77777777777778 . print(&#39;삼각형 넓이 구하기&#39;) a = input(&#39;밑변 :&#39;) b = input(&#39;높이 :&#39;) a, b = int(a), int(b) print(&#39;삼각형의 넓이:&#39;,a*b/2) . 삼각형 넓이 구하기 밑변 :3 높이 :4 삼각형의 넓이: 6.0 . print(&#39;삼각형 넓이 구하기&#39;) a = int(input(&#39;밑변 :&#39;)) b = int(input(&#39;높이 :&#39;)) print(&#39;삼각형의 넓이:&#39;,a*b/2) . 삼각형 넓이 구하기 밑변 :1 높이 :5 삼각형의 넓이: 2.5 . x = 20 x += 50 print(x) x = x + 12 print(x) . 70 82 . a = input(&#39;경기장을 입력하시오 :&#39;) b = input(&#39;이긴팀을 입력하시오 :&#39;) c= input(&#39;진팀을 입력하시오 :&#39;) d = input(&#39;VIP를 입력하시오 :&#39;) f = input(&#39;스코어를 입력하시오 :&#39;) print(f&#39;&#39;&#39;오늘 {a}에서 경기가 열렸습니다. {b}와 {c}은 치열한 공방전을 펼쳤습니다. {d}이(가) 맹활약을 펼쳤습니다. 결국 {a}이(가) {c}을(를) {f}로 이겼습니다.&#39;&#39;&#39;) . 경기장을 입력하시오 :올림픽경기장 이긴팀을 입력하시오 :한국 진팀을 입력하시오 :일본 VIP를 입력하시오 :손흥민 스코어를 입력하시오 :6:0 오늘 올림픽경기장에서 경기가 열렸습니다. 한국와 일본은 치열한 공방전을 펼쳤습니다. 손흥민이(가) 맹활약을 펼쳤습니다. 결국 올림픽경기장이(가) 일본을(를) 6:0로 이겼습니다. . name = input(&#39;이름을 입력하세요:&#39;) a = int(input(&#39;국어성적을 입력하세요:&#39;)) b = int(input(&#39;영어성적을 입력하세요:&#39;)) c = int(input(&#39;수학성적을 입력하세요:&#39;)) print(f&#39;평균성적은 {(a+b+c)/3} 입니다.&#39;) . 이름을 입력하세요:김선민 국어성적을 입력하세요:90 영어성적을 입력하세요:100 수학성적을 입력하세요:50 평균성적은 80.0 입니다. . list1=[] for i in range(5): list1.append(int(input(&#39;숫자를 입력하시오 :&#39;))) total = sum(list1) if len(list1) != 0: average = sum(list1)/len(list1) else: average = 0 print(f&#39; 합계: {total}, 평균: {average}&#39;) . 숫자를 입력하시오 :22 숫자를 입력하시오 :11 숫자를 입력하시오 :33 숫자를 입력하시오 :44 숫자를 입력하시오 :55 합계: 165, 평균: 33.0 . #주사위를 10000번 던져서 나오는 값들의 빈도를 계산하는 프로그램을 작성해보자. #즉, 1,2,3,4,5,6 이 몇번 나오는지 계산한다. #난수 발생 함수와 리스트를 사용한다. import random d = [0,0,0,0,0,0] for x in range(9999): n = random.randint(1,6) if n == 1: d[0] += 1 elif n ==2: d[1] += 1 elif n ==3: d[2] += 1 elif n ==4: d[3] += 1 elif n ==5: d[4] += 1 elif n ==6: d[5] += 1 print(d) . [1594, 1694, 1695, 1635, 1759, 1622] . import random for n in range(10): nn = random.randint(1,15) if nn &gt; 10: print(nn, &#39;10보다 큽니다.&#39;) elif nn == 10: print(nn, &#39;10입니다.&#39;) else: print(nn, &#39;10보다 작습니다&#39;) . 15 10보다 큽니다. 7 10보다 작습니다 4 10보다 작습니다 11 10보다 큽니다. 10 10입니다. 14 10보다 큽니다. 5 10보다 작습니다 8 10보다 작습니다 15 10보다 큽니다. 6 10보다 작습니다 . s=[[96,84,80],[96,86,76],[76,95,83],[89,96,69],[90,76,91],[82,66,88],[83,86,79],[85,90,83]] k = [] e = [] m = [] for score in s: k.append(score[0]) e.append(score[1]) m.append(score[2]) print(k) print(e) print(m) aver1 = round(sum(k)/len(k),1) aver2 = round(sum(e)/len(e),1) aver3 = round(sum(m)/len(m),1) print(f&#39;국어평균: {aver1}, 영어평균: {aver2}, 수학평균: {aver3}&#39;) . [96, 96, 76, 89, 90, 82, 83, 85] [84, 86, 95, 96, 76, 66, 86, 90] [80, 76, 83, 69, 91, 88, 79, 83] 국어평균: 87.1, 영어평균: 84.9, 수학평균: 81.1 . #튜플은 ()로 둘러 싼다는 점, 값이 바뀌면 안되는 경우에 사용됨. 튜플은 데이터 선언시 딱 제정 되기 떄문에 읽기도 빠르고, 정확하게 사용할 수 있다. t1 = (1,2,3) print(t1) . (1, 2, 3) . t2 = 1, t2 . (1,) . t1 = (1,5,3,4,2) #리스트와 동일한 방법으로 튜플을 다룰 수 있다. ******다만 추가, 삽입,수정,원본리스트 정렬과 같이 데이터를 변경하는 것은 불가능 t2 = (6,7,8,9,8) print(t1[1]) #인덱싱 print(t1[2:4]) #슬라이싱 print(t1+t2) #더하기 print(t1*3)#곱하기 print(len(t1))#길이 구하기 print(t2.index(9))#요소의 위치 찾기 print(t2.count(8))#요소의 갯수 sort_t1 = sorted(t1)#정렬된 새로운 &#39;&#39;리스트&#39;&#39; 반환 print(sort_t1) . 5 (3, 4) (1, 5, 3, 4, 2, 6, 7, 8, 9, 8) (1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2) 5 3 2 [1, 2, 3, 4, 5] . values = [56,12,33,8,3,2,98] total = sum(values) print(total) . 212 . values = [56,12,33,8,3,2,98] total = 0 for i in range(7): total += values[i] total . 212 . values= [56,12,33,8,3,2,98] total = 0 for i in values: #for문 리스트 total += i total . 212 . dicr_person = { &#39;name&#39;: &#39;홍길동&#39;,&#39;phone&#39;:&#39;010454564&#39;,&#39;age&#39;:35,&#39;hobbies&#39;:[&#39;운동&#39;,&#39;독서&#39;]} dicr_person . {&#39;age&#39;: 35, &#39;hobbies&#39;: [&#39;운동&#39;, &#39;독서&#39;], &#39;name&#39;: &#39;홍길동&#39;, &#39;phone&#39;: &#39;010454564&#39;} . s = { &#39;홍길동&#39;: 100, &#39;수지&#39;: 900 } s . {&#39;수지&#39;: 900, &#39;홍길동&#39;: 100} . s = {} s[&#39;아이유&#39;] = 999 s[&#39;윈터&#39;] = 700 s[&#39;슬기&#39;] = 1000 s . {&#39;슬기&#39;: 1000, &#39;아이유&#39;: 999, &#39;윈터&#39;: 700} . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} del s[&#39;윈터&#39;] s . {&#39;슬기&#39;: 1000, &#39;아이유&#39;: 999} . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} w = s.pop(&#39;윈터&#39;) print(w) s . 700 . {&#39;슬기&#39;: 1000, &#39;아이유&#39;: 999} . d_scores = { &#39;홍길동&#39;:100, &#39;아버지&#39;:200, &#39;어머니&#39;:300 } a = d_scores.pop(&#39;홍길동&#39;) print(a) d_scores . 100 . {&#39;아버지&#39;: 200, &#39;어머니&#39;: 300} . d_scores = { &#39;홍길동&#39;:100, &#39;아버지&#39;:200, &#39;어머니&#39;:300 } d_scores.clear() d_scores . {} . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} s[&#39;아이유&#39;] = 1200 s . {&#39;슬기&#39;: 1000, &#39;아이유&#39;: 1200, &#39;윈터&#39;: 700} . d_scores = { &#39;홍길동&#39;:100, &#39;아버지&#39;:200, &#39;어머니&#39;:300 } d_scores[&#39;어머니&#39;] . 300 . d_scores = { &#39;홍길동&#39;:100, &#39;아버지&#39;:200, &#39;어머니&#39;:300 } &#39;어머니&#39; in d_scores . True . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} &#39;유진&#39; in s . False . d_scores = { &#39;홍길동&#39;:100, &#39;아버지&#39;:200, &#39;어머니&#39;:300 } for key in d_scores.keys(): print(lies(key, d_scores[key]) . 홍길동 100 아버지 200 어머니 300 . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} print(s.keys()) print(list(s.keys())) . dict_keys([&#39;아이유&#39;, &#39;윈터&#39;, &#39;슬기&#39;]) [&#39;아이유&#39;, &#39;윈터&#39;, &#39;슬기&#39;] . dicr_score = { &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100} print(dicr_score.items())# --&gt; 객체로 반환 *튜플형식으로 반환됨. print(list(dicr_score.items())) #--&gt; 객체를 리스트로 변환하여 사용 . dict_items([(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)]) [(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)] . #딕셔너리명.values() dicr_score = { &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100} print(dicr_score.values())# --&gt; value를 객체로 반환 print(list(dicr_score.values())) #--&gt; 객체를 리스트로 변환하여 사용 . dict_values([80, 90, 100]) [80, 90, 100] . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} print(s.values()) print(list(s.values())) . dict_values([999, 700, 1000]) [999, 700, 1000] . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} print(s.items()) print(list(s.items())) . dict_items([(&#39;아이유&#39;, 999), (&#39;윈터&#39;, 700), (&#39;슬기&#39;, 1000)]) [(&#39;아이유&#39;, 999), (&#39;윈터&#39;, 700), (&#39;슬기&#39;, 1000)] . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} for x in s.keys(): print(x,s[x]) . 아이유 999 윈터 700 슬기 1000 . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} for key,value in s.items(): print(key,value) . 아이유 999 윈터 700 슬기 1000 . d_scores = { &#39;홍길동&#39;:100, &#39;아버지&#39;:200, &#39;어머니&#39;:300 } # key sort하여 리스트로 받음 s_keys = sorted(d_scores.keys()) print(s_keys) # 정렬된 키 리스트 순서로 반복 for i in s_keys: print(key, d_scores[i]) . [&#39;아버지&#39;, &#39;어머니&#39;, &#39;홍길동&#39;] 슬기 200 슬기 300 슬기 100 . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} so = sorted(s.keys()) print(so) for i in so: print(key, so[i]) . [&#39;슬기&#39;, &#39;아이유&#39;, &#39;윈터&#39;] . TypeError Traceback (most recent call last) &lt;ipython-input-65-1b9b0440820d&gt; in &lt;module&gt;() 3 print(so) 4 for i in so: -&gt; 5 print(key, so[i]) TypeError: list indices must be integers or slices, not str . s = {&#39;아이유&#39;: 999, &#39;윈터&#39;: 700, &#39;슬기&#39;: 1000} ss = sorted(s.items()) print(ss) for key, value in ss: print(key,value) . [(&#39;슬기&#39;, 1000), (&#39;아이유&#39;, 999), (&#39;윈터&#39;, 700)] 슬기 1000 아이유 999 윈터 700 . #아이디 : kim, lee,han,hong,hwamg #마일리지: 12000,11000,3000,5000,18000 #1. 위의 표에 나타난 아이디와 마일이지 포인트를 딕셔너리에 저장한 다음 출력하는 프로그램을 작성하시오.#요소수정 #딕셔너리명[key]=value #2. 아이디 han의 마일리지를 5000점으로 업데이트를 하시오. --&gt;요소수정 #딕셔너리명[key]=value #3. 아이디 jang의 마일리지 7000을 추가하시오 #딕셔너리명[key] = value #4. 딕셔너리에서 가장 높은 마일리지를 찾아서 출려하는 프로그램을 작성하시오. max 사용 s = {&#39;kim&#39;:12000,&#39;lee&#39;:11000,&#39;han&#39;:3000,&#39;hong&#39;:5000,&#39;hwang&#39;:18000} s . {&#39;han&#39;: 3000, &#39;hong&#39;: 5000, &#39;hwang&#39;: 18000, &#39;kim&#39;: 12000, &#39;lee&#39;: 11000} . s= {} s[&#39;kim&#39;] = 12000 s[&#39;lee&#39;] = 11000 s[&#39;han&#39;] = 3000 s[&#39;hong&#39;] = 5000 s[&#39;hwang&#39;] = 18000 for key,value in s.items(): print(key, value) s[&#39;han&#39;] = 5000 print(s.items()) s[&#39;jang&#39;] = 7000 print(s.items()) max(s.values()) . kim 12000 lee 11000 han 3000 hong 5000 hwang 18000 dict_items([(&#39;kim&#39;, 12000), (&#39;lee&#39;, 11000), (&#39;han&#39;, 5000), (&#39;hong&#39;, 5000), (&#39;hwang&#39;, 18000)]) dict_items([(&#39;kim&#39;, 12000), (&#39;lee&#39;, 11000), (&#39;han&#39;, 5000), (&#39;hong&#39;, 5000), (&#39;hwang&#39;, 18000), (&#39;jang&#39;, 7000)]) . 18000 . dic={} while True: e = input(&#39;영어를 입력하시오:&#39;) if e ==&#39;&#39;: break k = input(&#39;뜻을 입력하시오:&#39;) dic[e] == k dic . 영어를 입력하시오:11 뜻을 입력하시오:한글 . KeyError Traceback (most recent call last) &lt;ipython-input-83-2654713f89db&gt; in &lt;module&gt;() 5 break 6 k = input(&#39;뜻을 입력하시오:&#39;) -&gt; 7 dic[e] == k 8 dic KeyError: &#39;11&#39; . dv = {} while True: #트루 값이면 계속 반복하라는 뜻. e = input(&#39;eng:&#39;) #키값 if e ==&#39;&#39;: break #빈칸이면 멈춤. k = input(&#39;kor:&#39;) #value값 dv[e] = k dv . eng:apple kor:사과 eng:banana kor:바나나 eng: . {&#39;apple&#39;: &#39;사과&#39;, &#39;banana&#39;: &#39;바나나&#39;} . score = 0 #단어 테스트 for e in dv.keys(): #key값을 가져오고 k = input(e+&#39;:&#39;) # input 받은 값을 가져옴 &#39;:&#39; 커서 깜박 if k == dv[e] : #input 받은 값과 동일 한지 score+=1 print(f&#39;맞은개수/전체단어수: {score}/{len(dv)}&#39;) . apple:사과 banana:바나나 맞은개수/전체단어수: 2/2 . x= {} while True: product = input(&#39;물건이름:&#39;) if product ==&#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if product in x.keys(): x[product] += num else: x[product] = num print(x) for key, value in sorted(x.items()): print(key, value, end = &#39;&#39;) . 물건이름:과자 갯수:10 물건이름:음료수 갯수:100 물건이름:사탕 갯수:500 물건이름: {&#39;과자&#39;: 10, &#39;음료수&#39;: 100, &#39;사탕&#39;: 500} 과자 10사탕 500음료수 100 . d = { &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100} s = sorted(d.items()) #정렬된 키 리스트 순서로 반복 for i in s: print(key, value) . 음료수 100 음료수 100 음료수 100 . &#48152;&#48373;&#47928; . 지정한 조건이 충족될 때까지 명령문이나 명령문 블록을 여러번 실행하는 구조 횟수 제어 for --&gt; 반복이 시작되기 전에 반복횟수를 지정하여 무한 루프에 빠지지 않는다. . 조건제어반복 while --&gt; 반복횟수는 조건에 따라 달라진다. 무한루프에 빠질 수 있다. . &#44592;&#48376; &#54805;&#49885; for i(&#51228;&#50612;&#48320;&#49688;) in &#49884;&#53248;&#49828;: . for i in [1,2,3,4,5]: print(i) . 1 2 3 4 5 . for i in &#39;python&#39;: print(i) . p y t h o n . for i in range(1,6): # 5보다 하나 작은 항목 값 print(i) #--&gt; 1~5까지 범위의 요소를 반복하여 i에 넣어라!!! . 1 2 3 4 5 . for i in range(1): # 5보다 하나 작은 항목 값 --&gt; 1은 끝값임 시작값 0이 생략된 것. print(i) #--&gt; 시퀀스(range 범위)에 있는 값들이 제어변수에 하나씩 할당되며 값이 할당될때마다 명령블록이 실행됨. . 0 . range() &#54632;&#49688; . 일정한 범위의 정수들을 생성한다. 시작값 생략가능(기본값:0) 끝값은 생략불가 증가값 생략가능(기본값:1) . for i in range(5): print(i) #--&gt; 세로로 값들이 출력되지만 print(i, end = &quot; &quot;)를 지정해주면 줄이 바뀌지 않고 가로로 출력됨 . 0 1 2 3 4 . for i in range(5): print(i,end= &quot; &quot;) . 0 1 2 3 4 . for i in range(0,100,10): print(i,end= &#39; t&#39;) # t --&gt; 탭 end=&#39; &#39;은 출력될 값들이 tap한만큼 띄어지고 가로로 출력값들이 나열됨. . 0 10 20 30 40 50 60 70 80 90 . for i in range(10,0,-1): print(i,end= &quot; &quot;) . 10 9 8 7 6 5 4 3 2 1 . for i in range(1,10,-1): # --&gt; 역수로 표현하기 위해서는 시작값이 마지막 값보다 커야함. print(i,end= &quot; &quot;) . for i in range(5): print(&#39;Hello World!!&#39;) #--&gt; 문자열은 그대로 범위만큼 반복됨(범위가 -1이 아님) . Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! . &#51312;&#44148; &#51228;&#50612; &#48152;&#48373;: while &#44396;&#51312; . 조건식의 결과가 True인 동안 반복된다. 조건식의 결과가 False가 되면 반복을 빠져나온다. . while &#51312;&#44148;&#49885; : &#47749;&#47161; &#48660;&#47197; . i = 0# 전환되는 변수 i값을 줌, 루프의 조건식에 사용되는 변수는 루프에 들어가기 전에 초기화되어야 한다. while i &lt;= 5: #i가 5보다 같거나, 작을때 까지만 반복해줘 i = i + 1 print(i,end= &#39; &#39;) # 출력하는데 1씩 더해 ##루프의 조건식에 사용되는 변수 값은 루프 내에서 변경되어야 한다. #변수 i에 1이 할당된다. #1&gt;=5가 검사된다 #참이므로 1을 출력하고 i에 1을 더하여 i는 2가 된다. #이렇게 쭉 이어짐 #5 --&gt; 1을 더하면 6이되서 false가 되기 때문에 while문에서 벗어나게 된다. . 1 2 3 4 5 6 . i = 1 while i &lt;=5: # i는 1, 1은 영원히 5보다 작기 때문에 무한대로 11111111111이 출려됨 print(i,end=&#39;&#39;) print(&#39;end&#39;) . #q를 입력할때까지 반복하여 이름을 입력받는 프로그햄을 작성하시오. #조건반복으로만 할 수 있다.(q를 입력하지 않았으면 반복) name = &#39;&#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) print(name) . 이름을 입력하세요:dd dd 이름을 입력하세요:ss ss 이름을 입력하세요:ss ss 이름을 입력하세요: 이름을 입력하세요:q q . sum1 = 0 for i in range(5): sum1 += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력: &#39;,sum1) . 정수입력:5 정수입력:5 정수입력:5 정수입력:5 정수입력:5 합계출력: 25 . #사용자로부터 n값을 입력받고 #n개의 정수를 입력받아 합계를 구하여 출력하는 프로그램을 작성하시오. n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수를 입력하시오: &#39;)) sum1 += num print(&#39;합계출력:&#39;, sum1) . 몇개의 숫자를 더할까요? :3 정수를 입력하시오: 15 정수를 입력하시오: 99 정수를 입력하시오: 100 합계출력: 214 . n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) sum1 = 0 for i in range(n): sum1 += int(input(&#39;정수를 입력하시오: &#39;)) print(&#39;합계출력:&#39;, sum1) . 몇개의 숫자를 더할까요? :2 정수를 입력하시오: 999999 정수를 입력하시오: 1 합계출력: 1000000 . n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수를 입력하시오: &#39;)) if num % 2 == 0: sum1 += num print(&#39;합계출력:&#39;, sum1) . 몇개의 숫자를 더할까요? :4 정수를 입력하시오: 1 정수를 입력하시오: 2 정수를 입력하시오: 3 정수를 입력하시오: 4 합계출력: 6 . n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수를 입력하시오: &#39;)) if num % 2 == 1: sum1 += num print(&#39;합계출력:&#39;, sum1) . 몇개의 숫자를 더할까요? :4 정수를 입력하시오: 1 정수를 입력하시오: 2 정수를 입력하시오: 3 정수를 입력하시오: 4 합계출력: 4 . #0이 입력될때까지 사용가자 숫자를 입력하고, 입력이 끝나면 입력된 숫자들의 합이 출력되는 프로그램을 작성하시오 sum1 = 0 num = int(input(&#39;숫자입력:&#39;)) while num != 0: sum1 +=num num = int(input(&#39;숫자입력: &#39;))# --&gt; 입력받은 값이 0이 아닐때 입력 받은 수를 더하고 다음 숫자를 입력하도록 하기 위해 print(&#39;합계:&#39;, sum1) . 숫자입력:3 숫자입력: 4 숫자입력: 5 숫자입력: 0 합계: 12 . #숫자 n을 입력받아 1~n까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요. sum1=0 n = int(input(&#39;1부터 몇까지 더할까요? :&#39;)) for i in range(1,n+1): sum1 += i print(i) print(f&#39;1부터 {n}까지 더한 합계는: {sum1}&#39;) . 1부터 몇까지 더할까요? :10 1 2 3 4 5 6 7 8 9 10 1부터 10까지 더한 합계는: 55 . #숫자 n1,n2를 입력받아 n1~n2까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요. sum1=0 n1 =int(input(&#39;몇부터 입력할까요? : &#39;)) n2 = int(input(&#39;몇까지 더할까요? : &#39;)) for i in range(n1,n2+1): sum1 += i print(i) print(f&#39;{n1}부터 {n2}까지 더한 합계는 {sum1} 입니다.&#39;) . #사용자에게 n개의 숫자를 입력받아(몇개 숫자 입력할지, 숫자 입력 --&gt; 2가지의 input값을 받아야함) 그 숫자들의 평균을 계산해서 출력하는 파이썬 프로그램을 작성하세요. n = int(input(&#39;입력받을 정수의 개수 : &#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수를 입력하시오 : &#39;)) sum1 += num if n == 0: print(&#39;0개의 정수를 입력하셨습니다.&#39;) else: print(&#39;평균&#39;,sum1/n) . 입력받을 정수의 개수 : 0 0개의 정수를 입력하셨습니다. . #정수를 n을 입력받아 n!을 계산하는 프로그램을 작성하세요. n = int(input(&#39;몇 팩토리얼? :&#39;)) f = 1 for i in range(n,0,-1): f *= i print(i,f) print(f&#39;{n}! = {f}&#39;) . 몇 팩토리얼? :5 5 5 4 20 3 60 2 120 1 120 5! = 120 . #정수 n을 받아 구구단을 계산하는 프로그램을 작성하세요. n = int(input(&#39;구구단 몇단을 출력할까요? :&#39;)) for i in range(1,10): print(f&#39;{n} * {i} = {n*i}&#39;) . 구구단 몇단을 출력할까요? :10 10 * 1 = 10 10 * 2 = 20 10 * 3 = 30 10 * 4 = 40 10 * 5 = 50 10 * 6 = 60 10 * 7 = 70 10 * 8 = 80 10 * 9 = 90 . for i in range (3): # i, j : 내부 루프와 외부루프는 동일한 제어변수를 사용해서는 안됨 for j in range(5): ## 내부 for문을 외부 for문의 시퀀스 만큼 반복한다. print(i,j) # j는 하나 i의 범위 만큼 반복함 e.g. 0~4까지 범위에서 3번 반복 #i는 외부 시퀀스 만큼 반복 e.g. 0~2까지 범위에서 5번 반복 . 0 0 0 1 0 2 0 3 0 4 1 0 1 1 1 2 1 3 1 4 2 0 2 1 2 2 2 3 2 4 . for i in range (1,3): # i, j : 내부 루프와 외부루프는 동일한 제어변수를 사용해서는 안됨 for j in range(1,5): ## 내부 for문을 외부 for문의 시퀀스 만큼 반복한다. print(i,j) . 1 1 1 2 1 3 1 4 2 1 2 2 2 3 2 4 . for i in range(2,10): for j in range(1,10): print(f&#39; {i} * {j} = {i*j}&#39;, end=&#39; t&#39;) print() . 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10 2 * 6 = 12 2 * 7 = 14 2 * 8 = 16 2 * 9 = 18 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 6 * 1 = 6 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 7 * 1 = 7 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 8 * 1 = 8 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 9 * 1 = 9 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 . for i in range(2,10): for j in range(1,10): print(f&#39; {j} * {i} = {i*j}&#39;, end=&#39; t&#39;) print() . 1 * 2 = 2 2 * 2 = 4 3 * 2 = 6 4 * 2 = 8 5 * 2 = 10 6 * 2 = 12 7 * 2 = 14 8 * 2 = 16 9 * 2 = 18 1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 4 * 3 = 12 5 * 3 = 15 6 * 3 = 18 7 * 3 = 21 8 * 3 = 24 9 * 3 = 27 1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 5 * 4 = 20 6 * 4 = 24 7 * 4 = 28 8 * 4 = 32 9 * 4 = 36 1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 6 * 5 = 30 7 * 5 = 35 8 * 5 = 40 9 * 5 = 45 1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 7 * 6 = 42 8 * 6 = 48 9 * 6 = 54 1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 8 * 7 = 56 9 * 7 = 63 1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 9 * 8 = 72 1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 . t = &#39;I have a dream&#39; letter =input(&#39;찾을 문자:&#39;) for i in t: print(i,end=&quot; &quot;) if i == letter: #다시듣기 break ## d를 입력하면 d까지 찾고 출력멈춤. . 찾을 문자: I h a v e a d r e a m . # 1~ 100사이의 정답 숫자를 랜덤으로 하나 정하고 정답숫자를 맞출때까지 숫자를 입력하는 게임이다. # 내가 입력한 숫자가 정답보다 작으면 &#39;down&#39;,정답보다 크면 &#39;up&#39;을 출력하고 숫자를 다시입력받는다. #정답을 맞추면 &#39;정답!&#39;이라고 출력하고 게임을 끝낸다. import random r = random.randint(1,100) p = int(input(&#39;예상숫자를 입력하시오:&#39;)) while r != p: if r &gt; p: print(&#39;up&#39;) p = int(input(&#39;예상숫자를 입력하시오:&#39;)) else: print(&#39;down&#39;) p = int(input(&#39;예상숫자를 입력하시오:&#39;)) print(f&#39;정답!&#39;) . 예상숫자를 입력하시오:500 down 예상숫자를 입력하시오:100 down 예상숫자를 입력하시오:90 up 예상숫자를 입력하시오:95 down 예상숫자를 입력하시오:94 down 예상숫자를 입력하시오:93 정답! . import random r = random.randint(1,100) a = int(input(&#39;숫자 입력: &#39;)) while r != a: if r &gt; a: print(&quot;DOWN&quot;) a = int(input(&#39;숫자 입력: &#39;)) else: print(&quot;UP&quot;) a = int(input(&#39;숫자 입력: &#39;)) print(a, &quot;정답!&quot;) . File &#34;&lt;ipython-input-52-b49e69867f1b&gt;&#34;, line 4 while r != a: ^ IndentationError: unexpected indent . import calendar print(calendar.month(1992,12)) . December 1992 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . from calendar import month print(calendar.month(2021,6)) . June 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) m = [&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;] random.shuffle(m) #셔플은 무작위로 뽑는게 아니라 흔들어서 섞는다(안에서 섞어준다. 뽑는게 아님). print(m) print(a, b, c, d, e, f) . [&#39;보&#39;, &#39;가위&#39;, &#39;바위&#39;] 0.48381171135651635 9.928691420685515 6 94 i 보 . def say_hello(): #함수 정의 print(&#39;안녕하세요!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello()## 함수호출 . 안녕하세요!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name): print(f&#39;안녕하세요, {name}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;김선민&#39;) . 안녕하세요, 김선민!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name1, name2): print(f&#39;안녕하세요, {name1},{name2}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;) . TypeError Traceback (most recent call last) &lt;ipython-input-12-6a53d6f4809c&gt; in &lt;module&gt;() 3 print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) 4 print(&#39;즐거운 시간 되세요!!&#39;) -&gt; 5 say_hello(&#39;홍길동&#39;) TypeError: say_hello() missing 1 required positional argument: &#39;name2&#39; . #원의 반지를을 보내면 원의 넓이를 계산하여 반환하는 함수를 작성하시오. def c(r): area= 3.14 * r**2 return area print(c(5)) . 78.5 . # 두수를 매개변수로 받아 더한값을 반환하는 함수를 만드시오 def m(n1,n2): r = n1+n2 return r print(&#39;두 수의 합은&#39;,m(1,2)) #함수호출 . 두 수의 합은 3 . def get_plus_minus_d(num1,num2): plus = num1 + num2 minus = num1 - num2 if num2 != 0: d = num1/num2 else: print(&#39;0은 나눌 수 없습니다&#39;) get_plus_minus_d(2,1) . # 함수내 변수를 밖에서 사용 못함 def get_plus_minus(num1,num2): ## 초기 세팅값을 주면서 global을 붇이면 지역변수를 전역변수로 변경 가능 plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) #plus, minus는 사용자 지정함수 내에서 만든 지역변수 print(plus,minus) # 함수 내에서 만든 변수를 함수 밖에서 사용할 수 없다!!!!함수 내에서만 사용가능 . NameError Traceback (most recent call last) &lt;ipython-input-29-438a4485c6b6&gt; in &lt;module&gt;() 7 return plus,minus 8 get_plus_minus(1,2) #plus, minus는 사용자 지정함수 내에서 만든 지역변수 -&gt; 9 print(plus,minus) # 함수 내에서 만든 변수를 함수 밖에서 사용할 수 없다!!!!함수 내에서만 사용가능 NameError: name &#39;plus&#39; is not defined . def circle_area(): area = 3.14 * radius ** 2 return area radius = float(input(&#39;반지름:&#39;)) ### 함수 밖에서 만든 변수는 함수 내에서 사용할 수 circle_area() . 반지름:5 . 78.5 . def circle_area(): global area area = 3.14 * radius ** 2 return area area = 0 # 따로 밖에서 선언 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경안됨 0이 나옴 #함수에서 area 계산되었지만, 전역변수 값은 변경되지 않음. #함수에서 전역변수를 직접 사용한 것이 아니라, #동일한 이름과 값을 가진 지역변수를 새롭게 만들어 사용하기 때문임 . 반지름:5 원의 넓이: 78.5 78.5 . # 함수내 변수를 밖에서 사용 못함 def get_plus_minus(num1,num2): ## 초기 세팅값을 주면서 global을 붇이면 지역변수를 전역변수로 변경 가능 global plus global minus plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) #plus, minus는 사용자 지정함수 내에서 만든 지역변수 print(plus,minus) # 함수 내에서 만든 변수를 함수 밖에서 사용할 수 없다!!!!함수 내에서만 사용가능 . 3 -1 . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;,&#39;좋은 아침이야&#39;) . 안녕 철수,좋은 아침이야 . def greet(name=&#39;친구&#39;,msg=&#39;잘지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;지금뭐해? 자니?&#39;) . 안녕 지금뭐해? 자니?,잘지내니? . def calc(x,y,z): result = x + y - z return result calc(x=1,5,3) ## x 는 고정, 나머지는 매칭이 되어서 할당 # 위치 인수를 먼저 사용 . File &#34;&lt;ipython-input-41-5142853552c1&gt;&#34;, line 4 calc(x=1,5,3) ## x 는 고정, 나머지는 매칭이 되어서 할당 # 위치 인수를 먼저 사용 ^ SyntaxError: positional argument follows keyword argument . def average(*args): #args는 튜플 데이터형 print(args) avrg1 = sum(args) /len(args) return avrg1 print(average(1,8)) #인수3개 print(average(1,2,3,4,5)) # 인수5개 . (1, 8) 4.5 (1, 2, 3, 4, 5) 3.0 . #소수는 1과 자기 자신만으로 나누어 떨어지는 1보다 큰 양의 정수를 의미한다. #키보드로 입력된 수가 소수인지 아닌지 판별하는 함수를 작성하시오. def s(number): if number &lt; 2: return False for i in range(2,number): . File &#34;&lt;ipython-input-44-957fcff8f68b&gt;&#34;, line 9 ^ SyntaxError: unexpected EOF while parsing . def today_menu(*menu): for i in menu: print(i) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;, &#39;떡볶이&#39;, &#39;오뎅&#39;) . == 오늘의 메뉴 == 김밥 떡볶이 오뎅 . def get_plus_minus(num1,num2): plus = num1 + num2 return plus print(get_plus_minus(10,20)) . 30 . plus = lambda num1,num2: num1+num2 #:이후가 실행부 앞의 num1,num2는 매개변수 print(plus(10,20)) . 30 . #문자열.split() 함수는 문자열을 일정한 규칙으로 잘라서 리스트로 만들어 주는 함수 text = &#39;문자열나누기&#39; li = text.split(sep=&#39;열&#39;) li . [&#39;문자&#39;, &#39;나누기&#39;] .",
            "url": "https://seonmk12.github.io/seonmins_colab/2021/06/06/%EC%97%B0%EC%8A%B5.html",
            "relUrl": "/2021/06/06/%EC%97%B0%EC%8A%B5.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": ". #리스트생성 # 사진참조 . &#53916;&#54540; . 튜플은 아래의 두 가지 점을 제외하곤 리스트와 거의 동일 리스트는[]로 둘러싸지만 튜플은 () . &#46357;&#49492;&#45320;&#47532; . #in , not in . &#54632;&#49688; . 내장함수: 파이썬 프로그램에 기본적으로 내장된 함수 (import 불필요 e.g. print | &#54632;&#49688;&#51032; &#53945;&#51669; . 특정기능을 구현하기 위해 관련된 여러개의 실행문읗묶어놓은 코드 . 반복되는 부분을 함수화하여 코드의 중복을 배제한다. . 코드의 가독성을 높여 프로그램의 흐름 파악 및 디버깅(에러 수정) 용이 . &#45236;&#51109;&#54632;&#49688; . import가 필요 없음 . dir(__builtins__)# 파이썬 내장함수 목록 조회 . #내장함수(built-in)함수들 . #import하여 사용함, 모듈 뒤에 점(.)을 찍어 사용한다. #import 모듈 가져오기 #파이썬에서는 다양한 분야의 처리를 위한 기능을 제공함 #모듈 import방법 import 모듈명 # 모듈 불러오기 import 모듈명 as 별칭 # 별칭으로 모듈 불러오기 from 패키지명 import 모듈명 # 원하는 모듈만 특정해서 불러오기 from 모듈명 import 함수명 # 원하는 함수만 특정해서 불러오기 . import calendar # calendar 모듈 import print(calendar.month(2021,6)) # 달력 년월을 지정 출력 . June 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 . from calendar import month # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . May 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . from random import choice list_data = [1,2,3,4,5] choice(list_data) . 2 . . #시간데이터를 다루기 위한 모듈 . #임의의 수를 발생시키거나 리스트의 요소 중 임의의 수를 선택하는데 사용 #randint . ##경과한 날짜 수 확인: 임의의 날짜에서 다른 임의의 날짜까지의 경과일 계산 import datetime date1 = datetime.date.today() date2 = datetime.date(1992,12,19) print(date1-date2) . 10392 days, 0:00:00 . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) m = [&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;] random.shuffle(m) #셔플은 무작위로 뽑는게 아니라 흔들어서 섞는다(안에서 섞어준다. 뽑는게 아님). print(m) print(a,b,c,d,e,f) . [&#39;가위&#39;, &#39;바위&#39;, &#39;보&#39;] 0.479113950602995 8.271788637000439 7 0 g 보 . import random G = [“가위”, “바위”, “보&quot;] random.shuffle(G) print(G) . File &#34;&lt;ipython-input-30-dfc9aa85f63f&gt;&#34;, line 3 G = [“가위”, “바위”, “보&#34;] ^ SyntaxError: invalid character in identifier . &#49324;&#50857;&#51088; &#51221;&#51032; &#54632;&#49688; . 사용자가 필요한 기능을 직접 정의하는 함수 . Def 함수명(매개변수): (매개변수는 생략가능) 함수기능 return 반환값 . 함수명은 변수명과 동일한 규칙으로 만들어진다.매개변수는 필요한 만큼 기술할 수 있으며, 없을 수도 있다. *반환값은 없거나 1개이다. %%반환값이 여러개인 경우 하나의 튜플로 묶어서 반환된다. . 함수가 수행할 일 return 함수가 반환한 객체 . ##환영메시지를 출력하는 함수를 만들고, 함수를 호출하여 출력 def say_hello(): #함수 정의 print(&#39;안녕하세요!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello()## 함수호출 . 안녕하세요!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . #인수전달 def say_hello(name): print(f&#39;안녕하세요, {name}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;) . 안녕하세요, 홍길동!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name1, name2): print(f&#39;안녕하세요, {name1},{name2}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;, &#39;홍자매&#39;) . 안녕하세요, 홍길동,홍자매!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name1, name2, name3): print(f&#39;안녕하세요, {name1},{name2}, {name3}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;, &#39;홍자매&#39;,&#39;김선민&#39;) . 안녕하세요, 홍길동,홍자매, 김선민!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . #원의 반지를을 보내면 원의 넓이를 계산하여 반환하는 함수를 작성하시오. def circle_area(radius): area = 3.14 * radius ** 2 return area circle_area(5) # 리턴값이 있을 때 값을 반환한다. 외부변수는 변화시키지 못함 . 78.5 . # 두수를 매개변수로 받아 더한값을 반환하는 함수를 만드시오 def p(n1,n2): result = n1 +n2 return result p(1,2) . 3 . def p(n1,n2): result = n1 - n2 return result p(1,2) . -1 . def p(n1,n2): result = n1 * n2 return result p(1,2) . 2 . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus ###리턴값이 두개 get_plus_minus(1,2) . (3, -1) . def get_plus_minus_m_d(num1,num2): plus = num1 + num2 minus = num1 - num2 m = num1 * num2 d = num1/num2 return plus,minus, m, d ###리턴값이 두개 get_plus_minus(1,0) . ZeroDivisionError Traceback (most recent call last) &lt;ipython-input-50-e0aa78770abf&gt; in &lt;module&gt;() 7 print(&#39;0은 나눌 수 없습니다.&#39;) 8 return plus,minus, m, d ###리턴값이 두개 -&gt; 9 get_plus_minus(1,0) &lt;ipython-input-47-ca48131f54c8&gt; in get_plus_minus(num1, num2) 3 minus = num1 - num2 4 m = num1 * num2 -&gt; 5 d = num1/num2 6 return plus,minus, m, d ###리턴값이 두개 7 get_plus_minus(1,2) ZeroDivisionError: division by zero . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 d = num1/num2 return plus,minus a = 0 b = 3 if a != 0: get_plus_minus(b,a) else: print(&#39;0은 나눌 수 없습니다.&#39;) . 0은 나눌 수 없습니다. . def get_plus_minus(num1,num2): r = 0 plus = num1 + num2 minus = num1 - num2 if a != 0: r = n1/n2 else: print(&#39;0은 나눌 수 없습니다.&#39;) return plus,minus,d get_plus_minus(2,0) . File &#34;&lt;ipython-input-60-672ab15de00d&gt;&#34;, line 6 r = n1/n2 ^ IndentationError: expected an indented block . def d(n1,n2): result = 0 if n2 == 0: print(&#39;다른 수 입력하세요&#39;) else: result = n1/n2 return result d(2,0) . 다른 수 입력하세요 . &#51648;&#50669;&#48320;&#49688;, &#51204;&#50669;&#48320;&#49688; . 함수내에서 생성한 변수를 &#39;지역변수&#39;. 함수 밖에서 생성한 변수를 &#39;전역변수&#39;라 함 . # 함수내 변수를 밖에서 사용 못함 def get_plus_minus(num1,num2): ## 초기 세팅값을 주면서 global을 붇이면 지역변수를 전역변수로 변경 가능 plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) #plus, minus는 사용자 지정함수 내에서 만든 지역변수 print(plus,minus) # 함수 내에서 만든 변수를 함수 밖에서 사용할 수 없다!!!!함수 내에서만 사용가능 . 3 -1 . def circle_area(): area = 3.14 * radius ** 2 return area radius = float(input(&#39;반지름:&#39;)) ### 함수 밖에서 만든 변수는 함수 내에서 사용할 수 circle_area() . 반지름:1 . 3.14 . &#54632;&#49688; &#50504;&#50640;&#49436; &#51204;&#50669;&#48320;&#49688; &#44050; &#48320;&#44221;&#54616;&#44592; . 함수 안에서 전역변수의 값을 변경하려면, global 키워드를 사용해야한다. . def circle_area(): area = 3.14 * radius ** 2 return area area = 0 # 따로 밖에서 선언 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경안됨 0이 나옴 #함수에서 area 계산되었지만, 전역변수 값은 변경되지 않음. #함수에서 전역변수를 직접 사용한 것이 아니라, #동일한 이름과 값을 가진 지역변수를 새롭게 만들어 사용하기 때문임 . 반지름:12 원의 넓이: 452.16 0 . def circle_area(): global area # 글로벌을 붙이면 ## 초기 세팅값을 주면서 global을 붇이면 지역변수를 전역변수로 변경 가능 area = 3.14 * radius ** 2 return area area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경 # global키워드를 사용하면 전역변수를 직접 사용하게 된다. . 반지름:12 원의 넓이: 452.16 452.16 . &#46356;&#54260;&#53944; &#51064;&#49688; . 디폴트 인수란 초기값을 준다를 의미, 매개변수의 값을 지정해 놓고 기본적인 값으로 사용함. . 매개변수의 개수와 인수의 개수가 다르면 에러가 발생한다. . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;,&#39;좋은 아침이야&#39;) . 안녕 철수,좋은 아침이야 . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;) # greet의 인수 1개만 썼을때 &#39;msg&#39;가 빠졌다는 에러가 뜸. 디폴트 값이 없을때 에러 . TypeError Traceback (most recent call last) &lt;ipython-input-74-f03df1934f4c&gt; in &lt;module&gt;() 2 def greet(name,msg): 3 print(f&#39;안녕 {name},{msg}&#39;) -&gt; 4 greet(&#39;철수&#39;) TypeError: greet() missing 1 required positional argument: &#39;msg&#39; . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;):## 기본값을 깔고 가는 것 name = 친구 라는 기본값을 가짐 print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;,&#39;오랜만이야&#39;) . 안녕 영희,오랜만이야 . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;) #인수를 1개만 썼는데 msg의 디폴트 값인 &#39;잘지내니?&#39;가 출력됨. . 안녕 영희,잘 지내니? . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet() # . 안녕 친구,잘 지내니? . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;잘지내니?&#39;) . 안녕 잘지내니?,잘 지내니? . &#53412;&#50892;&#46300; &#51064;&#49688; . 위치 인수와 키워드 인수를 혼합해서 사용할 수 있지만, &#39;&#39;위치 인수를 먼저 사용해야 한다.&#39;&#39; . 위치 인수를 위치를 찾아 매칭하는 인수 . def calc(x,y,z): result = x + y - z return result calc(1,z=5,y=3) ## x 는 고정, 나머지는 매칭이 되어서 할당 # 위치 인수를 먼저 사용 . -1 . def calc(x,y,z): result = x +y -z return result calc(x=1,5,5) # 키워드 인수를 먼저쓰면 에러 . TypeError Traceback (most recent call last) &lt;ipython-input-87-086520ade661&gt; in &lt;module&gt;() 2 result = x +y -z 3 return result -&gt; 4 calc(1,5,y=10) TypeError: calc() got multiple values for argument &#39;y&#39; . def calc(a,b,c=3): result = a+b-c return result # calc(b=1,a=5,c=3) # calc(b=1,a=5) # calc(b=1,5,a=3) calc(1,c=5,a=3) . TypeError Traceback (most recent call last) &lt;ipython-input-91-06b87ddd6bf9&gt; in &lt;module&gt;() 5 # calc(b=1,a=5) 6 # calc(b=1,5,a=3) -&gt; 7 calc(1,c=5,a=3) TypeError: calc() got multiple values for argument &#39;a&#39; . &#47588;&#44060;&#48320;&#49688; &#44060;&#49688; &#44032;&#48320;&#51201;&#51068;&#46412; . &quot;매개변수*args&quot; . def average(*args): #args는 튜플 데이터형 print(args) avrg1 = sum(args) /len(args) return avrg1 print(average(1,3)) #인수3개 print(average(1,2,3,4,5)) # 인수5개 . (1, 3) 2.0 (1, 2, 3, 4, 5) 3.0 . def average(*a): ## args가 고정이 아니라 임의의 변수를 사용해도 댐 avrg1 = sum(a) /len(a) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . 2.0 3.0 . def average(*b): ## args가 고정이 아니라 임의의 변수를 사용해도 댐 avrg1 = sum(b) /len(b) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . 2.0 3.0 . def average(*a): ## args가 고정이 아니라 임의의 변수를 사용해도 댐 avrg1 = max(a) min1 = min(a) return avrg1,min1 print(average(1,2,3)) print(average(1,2,3,4,5)) . (3, 1) (5, 1) . #소수는 1과 자기 자신만으로 나누어 떨어지는 1보다 큰 양의 정수를 의미한다. #키보드로 입력된 수가 소수인지 아닌지 판별하는 함수를 작성하시오. def p(number): if number &lt; 2: return False for i in range(2,number): print(i, number) if number % i ==0: return False return True ip = int(input(&#39;숫자: &#39;)) if p(ip): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . def p(number): if number % 2 != 0: return False else: return True ip = int(input(&#39;숫자: &#39;)) if p(ip): print(&#39;짝수입니다.&#39;) else: print(&#39;짝수가 아닙니다.&#39;) . 숫자: 3 짝수가 아닙니다. . #합격여부 만들기 def p(num): if num &gt;= 75: return True else: return False input_p = int(input(&#39;점수를 입력하시오&#39;)) if p(input_p): print(&#39;축하합니다!! 합격입니다.&#39;) else: print(&#39;불합격하셨습니다:(&#39;) . 점수를 입력하시오50 불합격하셨습니다:( . def p(number): if number &lt; 2: return False for i in range(2,number): print(i, number) if number % i ==0: return False return True ip = int(input(&#39;숫자: &#39;)) if p(ip): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . 숫자: 50 2 50 소수가 아닙니다. . def p(num): if num &gt;= 70: return True else: return False input_p = int(input(&#39;점수를 입력하시오&#39;)) if p(input_p): print(&#39;축하합니다!! 합격입니다.&#39;) else: print(&#39;불합격하셨습니다:(&#39;) . 점수를 입력하시오69 불합격하셨습니다:( . def is_accepted(num): if num &gt;= 70: return True ## 리턴은 반환값.... # --&gt; 모든 리턴값이 있어야 함 input_num = int(input(&#39;점수를 입력하시오:&#39;)) if is_accepted(input_num): print(&#39;합격입니다&#39;) else: print(&#39;불합격입니다&#39;) . 점수를 입력하시오:69 불합격입니다 . #오늘의 급식메뉴를 출력하는 프로그램을 만들려고 한다. #몇개의 메뉴가 선택될 지 모른다. # 오늘의 메뉴를 출력하는 부분을 함수로 만들어 프로그램을 작성하시오. def today_menu(*menu): for i in menu: print(i) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;, &#39;떡볶이&#39;, &#39;오뎅&#39;) . == 오늘의 메뉴 == 김밥 떡볶이 오뎅 . def today_menu(*menu): for i in range(len(menu)): print(menu[i]) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;, &#39;떡볶이&#39;, &#39;오뎅&#39;,&#39;피자&#39;,&#39;족발&#39;) # 메뉴 인자가 정해지지 않았음. . == 오늘의 메뉴 == 김밥 떡볶이 오뎅 피자 족발 . lamda()&#54632;&#49688; . 한줄로 간단하게 만들어 주는 함수 . 함수명 없이 사용하는 것 . 간편하게 사용할때 프로그레머 임의데로 사용 . 복잡한 것은 람다를 사용하지 않음 . def get_plus_minus(num1,num2): plus = num1 + num2 return plus print(plus(10,20)) . 30 . plus = lambda num1,num2: num1+num2 #:이후가 실행부 앞의 num1,num2는 매개변수 print(plus(10,20)) . 30 . map() &#54632;&#49688; . 두개의 인자를 갖는 함수로 순서가 있는 자료형에 사용 . 첫번째 인자는 함수명, 두번째 인자는 순서가 있는 자료형 . mylist = [1,2,3,4,5,6,7,8,9,10] plus10 = lambda num: num+10 mylist = list(map(plus10,mylist)) print(mylist) . [11, 12, 13, 14, 15, 16, 17, 18, 19, 20] . mylist = [1,2,3,4,5] mylist = list(map(lambda num: num +10,mylist)) print(mylist) . [11, 12, 13, 14, 15] . mylist = (1,2,3,4,5,6,7,8,9,10) plus10 = lambda num: num+10 mylist = tuple(map(plus10,mylist)) print(mylist) . (11, 12, 13, 14, 15, 16, 17, 18, 19, 20) . &#51116;&#44480;&#54632;&#49688;() . 함수 안에서 함수 자기자신을 호줄하는 방식 . 재귀호출은 일반적인 상황에서는 잘 사용하지 않지만 알고리즘을 구현할 때 매우 유용합니다. . 일반적인 프로그램을 작성할때는 잘 안씀. . 특별한 알고리즘을 구현할때 매우 유용한 함수임. . def hello(count): if count == 0: ##반드시 종료 조건을 많들어야 함. count가 0이면 다시 hello함수를 호출하지 않고 끝냄. return print(&#39;Hello, World&#39;, count) count -= 1 #count를 1 감소시킨 뒤 hello(count) #다시 hello에 넣음 hello(5) #hello 함수 호출 . Hello, World 5 Hello, World 4 Hello, World 3 Hello, World 2 Hello, World 1 . #factorial n! = n*(n-1)*(n-2)*....*(n-(n-1)) #5! = 5*4*3*2*1 def f(n): if n == 1: #n이 1일 때 return 1 # 1을 반환하고 재귀호출을 끝냄 print(n) return n *f(n-1) #n과 f 함수에 n-1을 넣어서 반환된 값을 곱함. print(f(5)) . 5 4 3 2 120 . #키를 사용하여 해당 키에 새값을 지정한다. #딕셔너리명[key] == value dic_s ={&#39;홍길동&#39;:80, &#39;공유&#39;:90,&#39;현빈&#39;:100} dic_s.get(&#39;현빈&#39;) . 100 . #편의점 재고관리 프로그램을 작성해보자. #프로그램에는 3개의 메뉴가 있으며 기능은 다음과 같다. 각 메뉴는 함수로 작성한다. #초기재고는 삼각김밥10개, 커피우유 10개 #재고등록함수 #엔터를 입력할때까지 반복하여 사용자로부터 물건이름과 개수를 입력 받는다. # 만약 물건이름이 존재하지 않으면 추가하고, 존재하면 개수를 더한다. # 입력이 끝나면 모든 재고 현황 목록을 보여준다. # &#39;0&#39;을입력할때까지 메뉴를 입력받는다. #제품 판매 # 물건 이름과 개수를 입력받아 물건을 판매한다. # 물건 개수만큼 재고가 소진되고, 남은 개수가 표시된다. # 재고가 없으면 &#39;재고가 부족합니다.&#39;라고 안내한다. 엔터치면 빠져나오기 #재고확인 # 딕셔너리 출력 # 물건이름을 입력하면 재고를 출력한다. #해당하는 상품이 없으면 get. #등록되지 않은 상품 while True: print(&#39;&#39;&#39; ==== 재고관리 시스템 ==== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 &#39;&#39;&#39;) menu = input(&#39;메뉴를 선택하세요:&#39;) if menu == &#39;0&#39;: break elif menu == &#39;1&#39;: print(&#39;재고등록 시스템&#39;) a={&#39;삼각김밥&#39;:10,&#39;커피우유&#39;:10} while True: product = input(&#39;물건이름: &#39;) if product ==&#39;&#39;: break num = int(input(&#39;개수: &#39;)) if product in a.keys(): a[product] += num else: a[product] = num print(&#39;_&#39;*50) for key,value in sorted(a.items()): print(key, value) elif menu == &#39;2&#39;: print(&#39;제품판매 시스템&#39;) while True: product = input(&#39;상품명: &#39;) if product == &#39;&#39;: break num = int(input(&#39;개수: &#39;)) if product in a.keys(): a[product] -=num print(f&#39;{a}개 남았습니다&#39;) else: print(&#39;재고가 부족합니다.&#39;) elif menu == &#39;3&#39;: print(&#39;재고확인 시스템&#39;) while True: product = input(&#39;물건이름: &#39;) if product == &#39;&#39;: break . ==== 재고관리 시스템 ==== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:2 제품판매 시스템 상품명: 초코우유 개수: 1 재고가 부족합니다. . KeyboardInterrupt Traceback (most recent call last) /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password) 728 try: --&gt; 729 ident, reply = self.session.recv(self.stdin_socket, 0) 730 except Exception: /usr/local/lib/python3.7/dist-packages/jupyter_client/session.py in recv(self, socket, mode, content, copy) 802 try: --&gt; 803 msg_list = socket.recv_multipart(mode, copy=copy) 804 except zmq.ZMQError as e: /usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py in recv_multipart(self, flags, copy, track) 582 &#34;&#34;&#34; --&gt; 583 parts = [self.recv(flags, copy=copy, track=track)] 584 # have first part already, only loop while more to receive zmq/backend/cython/socket.pyx in zmq.backend.cython.socket.Socket.recv() zmq/backend/cython/socket.pyx in zmq.backend.cython.socket.Socket.recv() zmq/backend/cython/socket.pyx in zmq.backend.cython.socket._recv_copy() /usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: During handling of the above exception, another exception occurred: KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-171-fc9553a5ab6b&gt; in &lt;module&gt;() 49 print(&#39;제품판매 시스템&#39;) 50 while True: &gt; 51 product = input(&#39;상품명: &#39;) 52 if product == &#39;&#39;: 53 break /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in raw_input(self, prompt) 702 self._parent_ident, 703 self._parent_header, --&gt; 704 password=False, 705 ) 706 /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password) 732 except KeyboardInterrupt: 733 # re-raise KeyboardInterrupt, to truncate traceback --&gt; 734 raise KeyboardInterrupt 735 else: 736 break KeyboardInterrupt: . # 딕셔너리 출력 # 물건이름을 입력하면 재고를 출력한다. #해당하는 상품이 없으면 get. #등록되지 않은 상품 . inventory = {&#39;삼각김밥&#39;: 10, &#39;커피우유&#39;:10} def add_product(): while True: product = input(&#39;상품명:&#39;) if product ==&#39; &#39;: break number = int(input(&#39;갯수: &#39;)) if product in inventory.keys(): inventory[product] += num else: inventory[product] = num print(&#39;_&#39;*50) for key, value in inventory.items(): print(key, value) . File &#34;&lt;ipython-input-167-dc1185dc41a4&gt;&#34;, line 12 else: ^ IndentationError: unindent does not match any outer indentation level . def sel_product(): while True: product input(&#39;상품명: &#39;) if product ==&#39; &#39;: break num = int(input(&#39;개수: &#39;)) if product in inventory.keys(): a[product] -=num print(f&#39;{inventory}개 남았습니다&#39;) else: print(&#39;재고가 부족합니다.&#39;) . File &#34;&lt;ipython-input-168-2e505619ca96&gt;&#34;, line 3 product input(&#39;상품명: &#39;) ^ SyntaxError: invalid syntax .",
            "url": "https://seonmk12.github.io/seonmins_colab/2021/06/06/_4%ED%8C%80_%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "relUrl": "/2021/06/06/_4%ED%8C%80_%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seonmk12.github.io/seonmins_colab/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seonmk12.github.io/seonmins_colab/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . **dt ** . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seonmk12.github.io/seonmins_colab/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seonmk12.github.io/seonmins_colab/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}