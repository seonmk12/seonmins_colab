{
  
    
        "post0": {
            "title": "Title",
            "content": ". #리스트생성 # 사진참조 . &#53916;&#54540; . 튜플은 아래의 두 가지 점을 제외하곤 리스트와 거의 동일 리스트는[]로 둘러싸지만 튜플은 () . &#46357;&#49492;&#45320;&#47532; . #in , not in . &#54632;&#49688; . 내장함수: 파이썬 프로그램에 기본적으로 내장된 함수 (import 불필요 e.g. print | &#54632;&#49688;&#51032; &#53945;&#51669; . 특정기능을 구현하기 위해 관련된 여러개의 실행문읗묶어놓은 코드 . 반복되는 부분을 함수화하여 코드의 중복을 배제한다. . 코드의 가독성을 높여 프로그램의 흐름 파악 및 디버깅(에러 수정) 용이 . &#45236;&#51109;&#54632;&#49688; . import가 필요 없음 . dir(__builtins__)# 파이썬 내장함수 목록 조회 . #내장함수(built-in)함수들 . #import하여 사용함, 모듈 뒤에 점(.)을 찍어 사용한다. #import 모듈 가져오기 #파이썬에서는 다양한 분야의 처리를 위한 기능을 제공함 #모듈 import방법 import 모듈명 # 모듈 불러오기 import 모듈명 as 별칭 # 별칭으로 모듈 불러오기 from 패키지명 import 모듈명 # 원하는 모듈만 특정해서 불러오기 from 모듈명 import 함수명 # 원하는 함수만 특정해서 불러오기 . import calendar # calendar 모듈 import print(calendar.month(2021,6)) # 달력 년월을 지정 출력 . June 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 . from calendar import month # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . May 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . from random import choice list_data = [1,2,3,4,5] choice(list_data) . 2 . . #시간데이터를 다루기 위한 모듈 . #임의의 수를 발생시키거나 리스트의 요소 중 임의의 수를 선택하는데 사용 #randint . ##경과한 날짜 수 확인: 임의의 날짜에서 다른 임의의 날짜까지의 경과일 계산 import datetime date1 = datetime.date.today() date2 = datetime.date(1992,12,19) print(date1-date2) . 10392 days, 0:00:00 . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) m = [&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;] random.shuffle(m) #셔플은 무작위로 뽑는게 아니라 흔들어서 섞는다(안에서 섞어준다. 뽑는게 아님). print(m) print(a,b,c,d,e,f) . [&#39;가위&#39;, &#39;바위&#39;, &#39;보&#39;] 0.479113950602995 8.271788637000439 7 0 g 보 . import random G = [“가위”, “바위”, “보&quot;] random.shuffle(G) print(G) . File &#34;&lt;ipython-input-30-dfc9aa85f63f&gt;&#34;, line 3 G = [“가위”, “바위”, “보&#34;] ^ SyntaxError: invalid character in identifier . &#49324;&#50857;&#51088; &#51221;&#51032; &#54632;&#49688; . 사용자가 필요한 기능을 직접 정의하는 함수 . Def 함수명(매개변수): (매개변수는 생략가능) 함수기능 return 반환값 . 함수명은 변수명과 동일한 규칙으로 만들어진다.매개변수는 필요한 만큼 기술할 수 있으며, 없을 수도 있다. *반환값은 없거나 1개이다. %%반환값이 여러개인 경우 하나의 튜플로 묶어서 반환된다. . 함수가 수행할 일 return 함수가 반환한 객체 . ##환영메시지를 출력하는 함수를 만들고, 함수를 호출하여 출력 def say_hello(): #함수 정의 print(&#39;안녕하세요!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello()## 함수호출 . 안녕하세요!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . #인수전달 def say_hello(name): print(f&#39;안녕하세요, {name}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;) . 안녕하세요, 홍길동!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name1, name2): print(f&#39;안녕하세요, {name1},{name2}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;, &#39;홍자매&#39;) . 안녕하세요, 홍길동,홍자매!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . def say_hello(name1, name2, name3): print(f&#39;안녕하세요, {name1},{name2}, {name3}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;, &#39;홍자매&#39;,&#39;김선민&#39;) . 안녕하세요, 홍길동,홍자매, 김선민!! 파이썬의 세계에 오신 것을 환영합니다. 즐거운 시간 되세요!! . #원의 반지를을 보내면 원의 넓이를 계산하여 반환하는 함수를 작성하시오. def circle_area(radius): area = 3.14 * radius ** 2 return area circle_area(5) # 리턴값이 있을 때 값을 반환한다. 외부변수는 변화시키지 못함 . 78.5 . # 두수를 매개변수로 받아 더한값을 반환하는 함수를 만드시오 def p(n1,n2): result = n1 +n2 return result p(1,2) . 3 . def p(n1,n2): result = n1 - n2 return result p(1,2) . -1 . def p(n1,n2): result = n1 * n2 return result p(1,2) . 2 . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus ###리턴값이 두개 get_plus_minus(1,2) . (3, -1) . def get_plus_minus_m_d(num1,num2): plus = num1 + num2 minus = num1 - num2 m = num1 * num2 d = num1/num2 return plus,minus, m, d ###리턴값이 두개 get_plus_minus(1,0) . ZeroDivisionError Traceback (most recent call last) &lt;ipython-input-50-e0aa78770abf&gt; in &lt;module&gt;() 7 print(&#39;0은 나눌 수 없습니다.&#39;) 8 return plus,minus, m, d ###리턴값이 두개 -&gt; 9 get_plus_minus(1,0) &lt;ipython-input-47-ca48131f54c8&gt; in get_plus_minus(num1, num2) 3 minus = num1 - num2 4 m = num1 * num2 -&gt; 5 d = num1/num2 6 return plus,minus, m, d ###리턴값이 두개 7 get_plus_minus(1,2) ZeroDivisionError: division by zero . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 d = num1/num2 return plus,minus a = 0 b = 3 if a != 0: get_plus_minus(b,a) else: print(&#39;0은 나눌 수 없습니다.&#39;) . 0은 나눌 수 없습니다. . def get_plus_minus(num1,num2): r = 0 plus = num1 + num2 minus = num1 - num2 if a != 0: r = n1/n2 else: print(&#39;0은 나눌 수 없습니다.&#39;) return plus,minus,d get_plus_minus(2,0) . File &#34;&lt;ipython-input-60-672ab15de00d&gt;&#34;, line 6 r = n1/n2 ^ IndentationError: expected an indented block . def d(n1,n2): result = 0 if n2 == 0: print(&#39;다른 수 입력하세요&#39;) else: result = n1/n2 return result d(2,0) . 다른 수 입력하세요 . &#51648;&#50669;&#48320;&#49688;, &#51204;&#50669;&#48320;&#49688; . 함수내에서 생성한 변수를 &#39;지역변수&#39;. 함수 밖에서 생성한 변수를 &#39;전역변수&#39;라 함 . # 함수내 변수를 밖에서 사용 못함 def get_plus_minus(num1,num2): ## 초기 세팅값을 주면서 global을 붇이면 지역변수를 전역변수로 변경 가능 plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) #plus, minus는 사용자 지정함수 내에서 만든 지역변수 print(plus,minus) # 함수 내에서 만든 변수를 함수 밖에서 사용할 수 없다!!!!함수 내에서만 사용가능 . 3 -1 . def circle_area(): area = 3.14 * radius ** 2 return area radius = float(input(&#39;반지름:&#39;)) ### 함수 밖에서 만든 변수는 함수 내에서 사용할 수 circle_area() . 반지름:1 . 3.14 . &#54632;&#49688; &#50504;&#50640;&#49436; &#51204;&#50669;&#48320;&#49688; &#44050; &#48320;&#44221;&#54616;&#44592; . 함수 안에서 전역변수의 값을 변경하려면, global 키워드를 사용해야한다. . def circle_area(): area = 3.14 * radius ** 2 return area area = 0 # 따로 밖에서 선언 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경안됨 0이 나옴 #함수에서 area 계산되었지만, 전역변수 값은 변경되지 않음. #함수에서 전역변수를 직접 사용한 것이 아니라, #동일한 이름과 값을 가진 지역변수를 새롭게 만들어 사용하기 때문임 . 반지름:12 원의 넓이: 452.16 0 . def circle_area(): global area # 글로벌을 붙이면 ## 초기 세팅값을 주면서 global을 붇이면 지역변수를 전역변수로 변경 가능 area = 3.14 * radius ** 2 return area area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경 # global키워드를 사용하면 전역변수를 직접 사용하게 된다. . 반지름:12 원의 넓이: 452.16 452.16 . &#46356;&#54260;&#53944; &#51064;&#49688; . 디폴트 인수란 초기값을 준다를 의미, 매개변수의 값을 지정해 놓고 기본적인 값으로 사용함. . 매개변수의 개수와 인수의 개수가 다르면 에러가 발생한다. . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;,&#39;좋은 아침이야&#39;) . 안녕 철수,좋은 아침이야 . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;) # greet의 인수 1개만 썼을때 &#39;msg&#39;가 빠졌다는 에러가 뜸. 디폴트 값이 없을때 에러 . TypeError Traceback (most recent call last) &lt;ipython-input-74-f03df1934f4c&gt; in &lt;module&gt;() 2 def greet(name,msg): 3 print(f&#39;안녕 {name},{msg}&#39;) -&gt; 4 greet(&#39;철수&#39;) TypeError: greet() missing 1 required positional argument: &#39;msg&#39; . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;):## 기본값을 깔고 가는 것 name = 친구 라는 기본값을 가짐 print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;,&#39;오랜만이야&#39;) . 안녕 영희,오랜만이야 . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;) #인수를 1개만 썼는데 msg의 디폴트 값인 &#39;잘지내니?&#39;가 출력됨. . 안녕 영희,잘 지내니? . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet() # . 안녕 친구,잘 지내니? . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;잘지내니?&#39;) . 안녕 잘지내니?,잘 지내니? . &#53412;&#50892;&#46300; &#51064;&#49688; . 위치 인수와 키워드 인수를 혼합해서 사용할 수 있지만, &#39;&#39;위치 인수를 먼저 사용해야 한다.&#39;&#39; . 위치 인수를 위치를 찾아 매칭하는 인수 . def calc(x,y,z): result = x + y - z return result calc(1,z=5,y=3) ## x 는 고정, 나머지는 매칭이 되어서 할당 # 위치 인수를 먼저 사용 . -1 . def calc(x,y,z): result = x +y -z return result calc(x=1,5,5) # 키워드 인수를 먼저쓰면 에러 . TypeError Traceback (most recent call last) &lt;ipython-input-87-086520ade661&gt; in &lt;module&gt;() 2 result = x +y -z 3 return result -&gt; 4 calc(1,5,y=10) TypeError: calc() got multiple values for argument &#39;y&#39; . def calc(a,b,c=3): result = a+b-c return result # calc(b=1,a=5,c=3) # calc(b=1,a=5) # calc(b=1,5,a=3) calc(1,c=5,a=3) . TypeError Traceback (most recent call last) &lt;ipython-input-91-06b87ddd6bf9&gt; in &lt;module&gt;() 5 # calc(b=1,a=5) 6 # calc(b=1,5,a=3) -&gt; 7 calc(1,c=5,a=3) TypeError: calc() got multiple values for argument &#39;a&#39; . &#47588;&#44060;&#48320;&#49688; &#44060;&#49688; &#44032;&#48320;&#51201;&#51068;&#46412; . &quot;매개변수*args&quot; . def average(*args): #args는 튜플 데이터형 print(args) avrg1 = sum(args) /len(args) return avrg1 print(average(1,3)) #인수3개 print(average(1,2,3,4,5)) # 인수5개 . (1, 3) 2.0 (1, 2, 3, 4, 5) 3.0 . def average(*a): ## args가 고정이 아니라 임의의 변수를 사용해도 댐 avrg1 = sum(a) /len(a) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . 2.0 3.0 . def average(*b): ## args가 고정이 아니라 임의의 변수를 사용해도 댐 avrg1 = sum(b) /len(b) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . 2.0 3.0 . def average(*a): ## args가 고정이 아니라 임의의 변수를 사용해도 댐 avrg1 = max(a) min1 = min(a) return avrg1,min1 print(average(1,2,3)) print(average(1,2,3,4,5)) . (3, 1) (5, 1) . #소수는 1과 자기 자신만으로 나누어 떨어지는 1보다 큰 양의 정수를 의미한다. #키보드로 입력된 수가 소수인지 아닌지 판별하는 함수를 작성하시오. def p(number): if number &lt; 2: return False for i in range(2,number): print(i, number) if number % i ==0: return False return True ip = int(input(&#39;숫자: &#39;)) if p(ip): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . def p(number): if number % 2 != 0: return False else: return True ip = int(input(&#39;숫자: &#39;)) if p(ip): print(&#39;짝수입니다.&#39;) else: print(&#39;짝수가 아닙니다.&#39;) . 숫자: 3 짝수가 아닙니다. . #합격여부 만들기 def p(num): if num &gt;= 75: return True else: return False input_p = int(input(&#39;점수를 입력하시오&#39;)) if p(input_p): print(&#39;축하합니다!! 합격입니다.&#39;) else: print(&#39;불합격하셨습니다:(&#39;) . 점수를 입력하시오50 불합격하셨습니다:( . def p(number): if number &lt; 2: return False for i in range(2,number): print(i, number) if number % i ==0: return False return True ip = int(input(&#39;숫자: &#39;)) if p(ip): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . 숫자: 50 2 50 소수가 아닙니다. . def p(num): if num &gt;= 70: return True else: return False input_p = int(input(&#39;점수를 입력하시오&#39;)) if p(input_p): print(&#39;축하합니다!! 합격입니다.&#39;) else: print(&#39;불합격하셨습니다:(&#39;) . 점수를 입력하시오69 불합격하셨습니다:( . def is_accepted(num): if num &gt;= 70: return True ## 리턴은 반환값.... # --&gt; 모든 리턴값이 있어야 함 input_num = int(input(&#39;점수를 입력하시오:&#39;)) if is_accepted(input_num): print(&#39;합격입니다&#39;) else: print(&#39;불합격입니다&#39;) . 점수를 입력하시오:69 불합격입니다 . #오늘의 급식메뉴를 출력하는 프로그램을 만들려고 한다. #몇개의 메뉴가 선택될 지 모른다. # 오늘의 메뉴를 출력하는 부분을 함수로 만들어 프로그램을 작성하시오. def today_menu(*menu): for i in menu: print(i) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;, &#39;떡볶이&#39;, &#39;오뎅&#39;) . == 오늘의 메뉴 == 김밥 떡볶이 오뎅 . def today_menu(*menu): for i in range(len(menu)): print(menu[i]) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;, &#39;떡볶이&#39;, &#39;오뎅&#39;,&#39;피자&#39;,&#39;족발&#39;) # 메뉴 인자가 정해지지 않았음. . == 오늘의 메뉴 == 김밥 떡볶이 오뎅 피자 족발 . lamda()&#54632;&#49688; . 한줄로 간단하게 만들어 주는 함수 . 함수명 없이 사용하는 것 . 간편하게 사용할때 프로그레머 임의데로 사용 . 복잡한 것은 람다를 사용하지 않음 . def get_plus_minus(num1,num2): plus = num1 + num2 return plus print(plus(10,20)) . 30 . plus = lambda num1,num2: num1+num2 #:이후가 실행부 앞의 num1,num2는 매개변수 print(plus(10,20)) . 30 . map() &#54632;&#49688; . 두개의 인자를 갖는 함수로 순서가 있는 자료형에 사용 . 첫번째 인자는 함수명, 두번째 인자는 순서가 있는 자료형 . mylist = [1,2,3,4,5,6,7,8,9,10] plus10 = lambda num: num+10 mylist = list(map(plus10,mylist)) print(mylist) . [11, 12, 13, 14, 15, 16, 17, 18, 19, 20] . mylist = [1,2,3,4,5] mylist = list(map(lambda num: num +10,mylist)) print(mylist) . [11, 12, 13, 14, 15] . mylist = (1,2,3,4,5,6,7,8,9,10) plus10 = lambda num: num+10 mylist = tuple(map(plus10,mylist)) print(mylist) . (11, 12, 13, 14, 15, 16, 17, 18, 19, 20) . &#51116;&#44480;&#54632;&#49688;() . 함수 안에서 함수 자기자신을 호줄하는 방식 . 재귀호출은 일반적인 상황에서는 잘 사용하지 않지만 알고리즘을 구현할 때 매우 유용합니다. . 일반적인 프로그램을 작성할때는 잘 안씀. . 특별한 알고리즘을 구현할때 매우 유용한 함수임. . def hello(count): if count == 0: ##반드시 종료 조건을 많들어야 함. count가 0이면 다시 hello함수를 호출하지 않고 끝냄. return print(&#39;Hello, World&#39;, count) count -= 1 #count를 1 감소시킨 뒤 hello(count) #다시 hello에 넣음 hello(5) #hello 함수 호출 . Hello, World 5 Hello, World 4 Hello, World 3 Hello, World 2 Hello, World 1 . #factorial n! = n*(n-1)*(n-2)*....*(n-(n-1)) #5! = 5*4*3*2*1 def f(n): if n == 1: #n이 1일 때 return 1 # 1을 반환하고 재귀호출을 끝냄 print(n) return n *f(n-1) #n과 f 함수에 n-1을 넣어서 반환된 값을 곱함. print(f(5)) . 5 4 3 2 120 . #키를 사용하여 해당 키에 새값을 지정한다. #딕셔너리명[key] == value dic_s ={&#39;홍길동&#39;:80, &#39;공유&#39;:90,&#39;현빈&#39;:100} dic_s.get(&#39;현빈&#39;) . 100 . #편의점 재고관리 프로그램을 작성해보자. #프로그램에는 3개의 메뉴가 있으며 기능은 다음과 같다. 각 메뉴는 함수로 작성한다. #초기재고는 삼각김밥10개, 커피우유 10개 #재고등록함수 #엔터를 입력할때까지 반복하여 사용자로부터 물건이름과 개수를 입력 받는다. # 만약 물건이름이 존재하지 않으면 추가하고, 존재하면 개수를 더한다. # 입력이 끝나면 모든 재고 현황 목록을 보여준다. # &#39;0&#39;을입력할때까지 메뉴를 입력받는다. #제품 판매 # 물건 이름과 개수를 입력받아 물건을 판매한다. # 물건 개수만큼 재고가 소진되고, 남은 개수가 표시된다. # 재고가 없으면 &#39;재고가 부족합니다.&#39;라고 안내한다. 엔터치면 빠져나오기 #재고확인 # 딕셔너리 출력 # 물건이름을 입력하면 재고를 출력한다. #해당하는 상품이 없으면 get. #등록되지 않은 상품 while True: print(&#39;&#39;&#39; ==== 재고관리 시스템 ==== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 &#39;&#39;&#39;) menu = input(&#39;메뉴를 선택하세요:&#39;) if menu == &#39;0&#39;: break elif menu == &#39;1&#39;: print(&#39;재고등록 시스템&#39;) a={&#39;삼각김밥&#39;:10,&#39;커피우유&#39;:10} while True: product = input(&#39;물건이름: &#39;) if product ==&#39;&#39;: break num = int(input(&#39;개수: &#39;)) if product in a.keys(): a[product] += num else: a[product] = num print(&#39;_&#39;*50) for key,value in sorted(a.items()): print(key, value) elif menu == &#39;2&#39;: print(&#39;제품판매 시스템&#39;) while True: product = input(&#39;상품명: &#39;) if product == &#39;&#39;: break num = int(input(&#39;개수: &#39;)) if product in a.keys(): a[product] -=num print(f&#39;{a}개 남았습니다&#39;) else: print(&#39;재고가 부족합니다.&#39;) elif menu == &#39;3&#39;: print(&#39;재고확인 시스템&#39;) while True: product = input(&#39;물건이름: &#39;) if product == &#39;&#39;: break . ==== 재고관리 시스템 ==== 1:재고등록, 2:제품판매, 3:재고확인, 0:프로그램 종료 메뉴를 선택하세요:2 제품판매 시스템 상품명: 초코우유 개수: 1 재고가 부족합니다. . KeyboardInterrupt Traceback (most recent call last) /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password) 728 try: --&gt; 729 ident, reply = self.session.recv(self.stdin_socket, 0) 730 except Exception: /usr/local/lib/python3.7/dist-packages/jupyter_client/session.py in recv(self, socket, mode, content, copy) 802 try: --&gt; 803 msg_list = socket.recv_multipart(mode, copy=copy) 804 except zmq.ZMQError as e: /usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py in recv_multipart(self, flags, copy, track) 582 &#34;&#34;&#34; --&gt; 583 parts = [self.recv(flags, copy=copy, track=track)] 584 # have first part already, only loop while more to receive zmq/backend/cython/socket.pyx in zmq.backend.cython.socket.Socket.recv() zmq/backend/cython/socket.pyx in zmq.backend.cython.socket.Socket.recv() zmq/backend/cython/socket.pyx in zmq.backend.cython.socket._recv_copy() /usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: During handling of the above exception, another exception occurred: KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-171-fc9553a5ab6b&gt; in &lt;module&gt;() 49 print(&#39;제품판매 시스템&#39;) 50 while True: &gt; 51 product = input(&#39;상품명: &#39;) 52 if product == &#39;&#39;: 53 break /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in raw_input(self, prompt) 702 self._parent_ident, 703 self._parent_header, --&gt; 704 password=False, 705 ) 706 /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password) 732 except KeyboardInterrupt: 733 # re-raise KeyboardInterrupt, to truncate traceback --&gt; 734 raise KeyboardInterrupt 735 else: 736 break KeyboardInterrupt: . # 딕셔너리 출력 # 물건이름을 입력하면 재고를 출력한다. #해당하는 상품이 없으면 get. #등록되지 않은 상품 . inventory = {&#39;삼각김밥&#39;: 10, &#39;커피우유&#39;:10} def add_product(): while True: product = input(&#39;상품명:&#39;) if product ==&#39; &#39;: break number = int(input(&#39;갯수: &#39;)) if product in inventory.keys(): inventory[product] += num else: inventory[product] = num print(&#39;_&#39;*50) for key, value in inventory.items(): print(key, value) . File &#34;&lt;ipython-input-167-dc1185dc41a4&gt;&#34;, line 12 else: ^ IndentationError: unindent does not match any outer indentation level . def sel_product(): while True: product input(&#39;상품명: &#39;) if product ==&#39; &#39;: break num = int(input(&#39;개수: &#39;)) if product in inventory.keys(): a[product] -=num print(f&#39;{inventory}개 남았습니다&#39;) else: print(&#39;재고가 부족합니다.&#39;) . File &#34;&lt;ipython-input-168-2e505619ca96&gt;&#34;, line 3 product input(&#39;상품명: &#39;) ^ SyntaxError: invalid syntax .",
            "url": "https://seonmk12.github.io/seonmins_colab/2021/06/06/_4%ED%8C%80_%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "relUrl": "/2021/06/06/_4%ED%8C%80_%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seonmk12.github.io/seonmins_colab/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seonmk12.github.io/seonmins_colab/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seonmk12.github.io/seonmins_colab/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seonmk12.github.io/seonmins_colab/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}