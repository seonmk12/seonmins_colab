{
  
    
        "post0": {
            "title": "Title",
            "content": ". 반복구조 지정한 조건이 충족될 때까지 명령문이나 명령문 블록을 여러번 실행하는 구조 . &#54943;&#49688;&#51228;&#50612;(for) . 반복이 시작되기 전에 반복횟수를 지정 무한 루프에 빠지지 않는다. . &#51312;&#44148;&#51228;&#50612;&#48152;&#48373;(while) . 반복횟수는 조건에 따라 달라진다. 무한루프에 빠질 수 있다. . &#54943;&#49688;&#51228;&#50612; &#48152;&#48372;&#44592;for&#44396;&#51312; . 주어진 자료를 순회할때 주로 사용되는 반복구조이다. 반복의 번위가 미리 정해진다. . for &#51228;&#50612;&#48320;&#49688; in &#49884;&#53248;&#49828;: . 제어변수 관용적으로 i,j가 사용됨 for i in : . for i in [1,2,3,4,5]: print(i) #--&gt; 리스트 한 항목씩 받아서 나옴 . 1 2 3 4 5 . for i in &#39;python&#39;: print(i) . p y t h o n . for i in range(1,6): # 5보다 하나 작은 항목 값 print(i) . 1 2 3 4 5 . for i in range(5): # 5보다 하나 작은 항목 값 print(i) #--&gt; 시퀀스(range 범위)에 있는 값들이 제어변수에 하나씩 할당되며 값이 할당될때마다 명령블록이 실행됨. . 0 1 2 3 4 . range() &#54632;&#49688; . 일정한 범위의 정수들을 생성한다. 시작값 생량가능(기본값:0) 끝값은 생략 불가 증가값 생략가능(기본값:1) . &#49324;&#50857;&#48277; . range(끝값): 0~(끝값 -1), range(5) # 0,1,2,3,4 . for i in range(5): print(i,end= &quot; ,&quot;) # 프린트 함수에 end=&quot;&quot;를 지정하면 줄이 바뀌지 않고 출력된다. . 0 ,1 ,2 ,3 ,4 , . for i in range(1,6): print(i,end= &quot; &quot;) . 1 2 3 4 5 . for i in range(10,100,80): print(i,end= &#39; t&#39;) # t --&gt; 탭 . 10 90 . for i in range(10,0,-1): print(i,end= &quot; &quot;) . 10 9 8 7 6 5 4 3 2 1 . for i in range(1,10,-1): print(i,end= &quot; &quot;)##--&gt; 큰것 부터 작은 순으로(범위 밖이라서) . for i in range(100): print(&#39;Hello World!!&#39;) . &#51312;&#44148; &#51228;&#50612; &#48152;&#48373;: while&#44396;&#51312; . 조건식의 결과가 True인 동안 반복된다. 조건식의 결과가 FALSE가 되면 반복을 빠져나온다. . While 조건식: 명령블록 . i = 1# 전환되는 변수 i값을 줌, 루프의 조건식에 사용되는 변수는 루프에 들어가기 전에 초기화되어야 한다. while i &lt;= 5:#i가 5보다 작을때 까지만 반복해줘 print(i,end= &#39; &#39;) i = i + 1 # 출력하는데 1씩 더해 ##루프의 조건식에 사용되는 변수 값은 루프 내에서 변경되어야 한다. #변수 i에 1이 할당된다. #1&gt;=5가 검사된다 #참이므로 1을 출력하고 i에 1을 더하여 i는 2가 된다. #이렇게 쭉 이어짐 #5 --&gt; 1을 더하면 6이되서 false가 되기 때문에 while문에서 벗어나게 된다. . 1 2 3 4 5 . for i in range(1,6): print(i,end=&#39; &#39;) . 1 2 3 4 5 . i = 1 while i &lt;= 5: i = i + 1 #--&gt; 이러면 6이 됨 이러면 i값을 0을 주면 됨 print(i,end= &#39; &#39;) . 2 3 4 5 6 . i = 0 while i &lt;= 5: i = i + 1 print(i,end= &#39; &#39;) . 1 2 3 4 5 6 . while &#50694;&#50640;&#45716; &#52280;&#44144;&#51667;&#51060; &#46308;&#50612;&#44032;&#50556; &#54616;&#44592; &#46412;&#47928;&#50640; &#48148;&#47196; list&#44032; &#50732;&#49688; &#50630;&#44256; in&#51012; &#54252;&#54632;&#54616;&#44256; &#50416;&#47732; list&#49324;&#50857; &#44032;&#45733;. . i = 1 while i &lt;= 5: # i값이 계속 1이므로 무한루프 print(i) print(&#39;end&#39;) # --&gt; false값 #변수 i를 증가시키는 것을 까먹어서 무한루프에 빠졌다 #(변수i는 영원히 1이다.) #실행중단 ctrl + m+i . #q를 입력할때까지 반복하여 이름을 입력받는 프로그햄을 작성하시오. #조건반복으로만 할 수 있다.(q를 입력하지 않았으면 반복) name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) print(name) . 이름을 입력하세요:ㄴㄴ ㄴㄴ 이름을 입력하세요:q q . name = &#39; &#39; while name != &#39;&#39;: name = input(&#39;이름을 입력하시오 :&#39;) print(name) . 이름을 입력하시오 : . num1 = 0 sum1 = 0 while num1 != 99: num1 = int(input(&#39;숫자를 입력하시오 :&#39;)) sum1 += num1 print(num1) . 숫자를 입력하시오 :11 11 숫자를 입력하시오 :22 22 숫자를 입력하시오 :33 33 숫자를 입력하시오 :12 12 숫자를 입력하시오 :99 99 . name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) if name != &#39;q&#39;: print(name) . 이름을 입력하세요:11 11 이름을 입력하세요:12 12 이름을 입력하세요: 이름을 입력하세요:q . 5&#44060;&#51032; &#51221;&#49688;&#47484; &#51077;&#47141;&#48155;&#50500; &#54633;&#44228; &#44396;&#54616;&#44592; . 5개의 정수를 입력받아(입력:5번 반복) 합계를 구하여(처리) 출력하는 프로그램을 작성하시오. . sum1 = 0 for i in range(5): sum1 += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;, sum1) . 정수입력:11 정수입력:22 정수입력:33 정수입력:44 정수입력:55 합계출력: 220 . sum1 = 0 for i in range(5): sum1+= int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;, sum1) . 정수입력:1 정수입력:2 정수입력:3 정수입력:4 정수입력:5 합계출력: 115 . sum1 = 0 for i in range(5): num = int(input(&#39;정수입력:&#39;)) sum1 += num print(&#39;합계출력:&#39;,sum1) . sum1 = 0 while i != &#39; &#39;: sum1 += int(input(&#39;정수입력&#39;)) print(sum1) . 정수입력1 1 정수입력2 3 정수입력3 6 정수입력4 10 정수입력5 15 정수입력 . ValueError Traceback (most recent call last) &lt;ipython-input-66-19d6a55b7ff3&gt; in &lt;module&gt;() 1 sum1 = 0 2 while i != &#39; &#39;: -&gt; 3 sum1 += int(input(&#39;정수입력&#39;)) 4 print(sum1) 5 ValueError: invalid literal for int() with base 10: &#39;&#39; . #사용자로부터 n값을 입력받고 #n개의 정수를 입력받아 합계를 구하여 출력하는 프로그램을 작성하시오. n= int(input(&#39;몇개의 숫자를 더할까요?:&#39;)) sum1 = 0 for i in range(n): sum += int(input(&#39;정수입력&#39;)) print(&#39;합계출력:&#39;, sum) . 몇개의 숫자를 더할까요?:1 정수입력10 합계출력: 4251746461 . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): sum1 += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 더할까요? :2 정수입력:10 정수입력:20 합계출력: 30 . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) sum1 += num print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 더할까요? :5 정수입력:1 정수입력:2 정수입력:3 정수입력:4 정수입력:5 합계출력: 15 . sum1= 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 2 == 0: sum1 += num print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 더할까요? :2 정수입력:4 정수입력:6 합계출력: 10 . sum1= 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 2 == 1: sum1 += num print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 더할까요? :3 정수입력:2 정수입력:3 정수입력:5 합계출력: 8 . sum1= 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 3 == 1: sum1 += num print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 더할까요? :3 정수입력:1 정수입력:3 정수입력:4 합계출력: 5 . #0이 입력될때까지 사용가자 숫자를 입력하고, 입력이 끝나면 입력된 숫자들의 합이 출력되는 프로그램을 작성하시오 sum1 = 1 num = int(input(&#39;숫자: &#39;)) while num != 0: sum1 += num num = int(input(&#39;숫자:&#39;)) print(&#39;합계:&#39;, sum1) . 숫자 입력: 1 숫자:2 숫자:3 숫자:4 숫자:0 합계: 11 . sum1 = 0 # 초기값을 줘야 다른 것이 들어가는 것을 막을 수 있음. num = &#39;숫자: &#39; while num != 0: num = int(input(&#39;숫자:&#39;)) sum1 += num print(&#39;합계:&#39;, sum1) . 숫자:10 숫자:20 숫자:0 합계: 30 . sum1 = 0 chk = 1 num = int(input(&quot;숫자: &quot;)) while num!=0 or chk == 1: sum1+=num num = int(input(&quot;숫자: &quot;)) chk = 1 + chk print(&#39;합계:&#39;, sum1) . 숫자: 10 숫자: 20 숫자: 0 합계: 30 . sum1 = 0 chk = 1 while num!=0 or chk == 1: num = int(input(&quot;숫자: &quot;)) sum1 += num if chk == 1: chk = 1 +chk print(&#39;합계:&#39;, sum1) . 숫자: 10 숫자: 20 숫자: 0 합계: 30 . #숫자 n을 입력받아 1~n까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요. sum1=0 n = int(input(&#39;1부터 몇까지 더할까요?:&#39;)) for i in range(1,n+1): sum1 += i print(f&#39; 1부터 {n}까지 더한 합계는 : {sum1}&#39;) . 1부터 몇까지 더할까요?:10 1부터 10까지 더한 합계는 : 55 . sum1=0 n = int(input(&#39;1부터 몇까지 더할까요? : &#39;)) for i in range(1,n+1): sum1 += i print(f&#39;1부터 {n}까지 더한 합계는 : {sum1}&#39;) . 1부터 몇까지 더할까요? : 10 1부터 10까지 더한 합계는 : sum1 . sum1=0 n = int(input(&#39;1부터 몇까지 더할까요? : &#39;)) for i in range(1,n+1): sum1 += i print(i) # i값이 변화되는 값을 보여줌. print(f&#39;1부터 {n}까지 더한 합계는 : {sum1}&#39;) . 1부터 몇까지 더할까요? : 10 1 2 3 4 5 6 7 8 9 10 1부터 10까지 더한 합계는 : 55 . sum1=0 n = int(input(&#39;1부터 몇까지 더할까요? : &#39;)) i = 1 while i &lt;= n: sum1 += i i +=1 print(i) print(f&#39;1부터 {n}까지 더한 합계는 : {sum1}&#39;) . 1부터 몇까지 더할까요? : 10 2 3 4 5 6 7 8 9 10 11 1부터 10까지 더한 합계는 : 55 . #숫자 n1,n2를 입력받아 n1~n2까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요. sum1 = 0 n1 = int(input(&#39;몇부터 더 할까요?:&#39;)) n2 = int(input(&#39;몇까지 더할까요?:&#39;)) for i in range(n1,n2+1): # 끝범위 +1을 해줘야 함. 윗 예제와 이 부분이 다름. sum1 += i print(i) print(f&#39;{n1}부터 {n2}까지 더한 합계는 : {sum1}&#39;) . 몇부터 더 할까요?:2 몇까지 더할까요?:10 2 3 4 5 6 7 8 9 10 2부터 10까지 더한 합계는 : 54 . #사용자에게 n개의 숫자를 입력받아(몇개 숫자 입력할지, 숫자 입력 --&gt; 2가지의 input값을 받아야함) 그 숫자들의 평균을 계산해서 출력하는 파이썬 프로그램을 작성하세요. n = int(input(&#39;입력받을 정수의 개수: &#39;)) sum1= 0 for i in range(n): num = int(input(&#39;정수:&#39;)) sum1 += num if n == 0: print(&#39;0개의 정수를 입력하셨습니다.&#39;) else: print(&#39;평균:&#39; , sum1/n) . 입력받을 정수의 개수: 3 정수:90 90 정수:1 1 정수:50 50 평균: 47.0 . #정수를 n을 입력받아 n!을 계산하는 프로그램을 작성하세요. n = int(input(&#39;몇 팩토리얼? : &#39;)) f = 1#곱하기니까 0을 주면 안됨 for i in range(n,0,-1): f *= i print(i,f) #ctrl + / 주석처리 print(f&#39;{n}! = {f}&#39;) . 몇 팩토리얼? : 10 10 10 9 90 8 720 7 5040 6 30240 5 151200 4 604800 3 1814400 2 3628800 1 3628800 10! = 3628800 . #정수 n을 받아 구구단을 계산하는 프로그램을 작성하세요. n = int(input(&#39;구구단 몇단을 출력할까요? :&#39;)) for i in range(1,10):#시작값은 1 끝값을 9로 하고 싶기 떄문에 +1 을 한 10 print(f&#39;{n} * {i} = {n*i}&#39;) . 구구단 몇단을 출력할까요? :1 1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 1 * 4 = 4 1 * 5 = 5 1 * 6 = 6 1 * 7 = 7 1 * 8 = 8 1 * 9 = 9 . for i in range (3): # i, j : 내부 루프와 외부루프는 동일한 제어변수를 사용해서는 안됨 for j in range(5): ## 내부 for문을 외부 for문의 시퀀스 만큼 반복한다. print(i,j) # j는 하나 i의 범위 만큼 반복함 e.g. 0~4까지 범위에서 3번 반복 #i는 외부 시퀀스 만큼 반복 e.g. 0~2까지 범위에서 5번 반복 . 0 0 0 1 0 2 0 3 0 4 1 0 1 1 1 2 1 3 1 4 2 0 2 1 2 2 2 3 2 4 . for i in range (1,3): # i, j : 내부 루프와 외부루프는 동일한 제어변수를 사용해서는 안됨 for j in range(1,5): ## 내부 for문을 외부 for문의 시퀀스 만큼 반복한다. print(i,j) . 1 1 1 2 1 3 1 4 2 1 2 2 2 3 2 4 . for i in range (1,7,2): # i, j : 내부 루프와 외부루프는 동일한 제어변수를 사용해서는 안됨 for j in range(1,5,2): ## 내부 for문을 외부 for문의 시퀀스 만큼 반복한다. print(i,j,i*j) . 1 1 1 1 3 3 3 1 3 3 3 9 5 1 5 5 3 15 . for i in range(2,10): for j in range(1,10): print(f&#39; {i} * {j} = {i*j}&#39;, end=&#39; t&#39;) print() #--&gt;한줄 건너뛰기 . 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10 2 * 6 = 12 2 * 7 = 14 2 * 8 = 16 2 * 9 = 18 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 6 * 1 = 6 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 7 * 1 = 7 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 8 * 1 = 8 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 9 * 1 = 9 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 . for i in range(2,10): for j in range(1,10): print(f&#39; {j} * {i} = {i*j}&#39;, end=&#39; t&#39;) print() #--&gt;한줄 건너뛰기 . 1 * 2 = 2 2 * 2 = 4 3 * 2 = 6 4 * 2 = 8 5 * 2 = 10 6 * 2 = 12 7 * 2 = 14 8 * 2 = 16 9 * 2 = 18 1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 4 * 3 = 12 5 * 3 = 15 6 * 3 = 18 7 * 3 = 21 8 * 3 = 24 9 * 3 = 27 1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 5 * 4 = 20 6 * 4 = 24 7 * 4 = 28 8 * 4 = 32 9 * 4 = 36 1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 6 * 5 = 30 7 * 5 = 35 8 * 5 = 40 9 * 5 = 45 1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 7 * 6 = 42 8 * 6 = 48 9 * 6 = 54 1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 8 * 7 = 56 9 * 7 = 63 1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 9 * 8 = 72 1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 . break . 반복에서 벗어나기 . 문장 &#39; i have a dream&#39;에서 찾을 문자를 입력받고, 해당 문자를 찾으면 반복을 종료한다. . t = &#39;I have a dream&#39; letter =input(&#39;찾을 문자:&#39;) for i in t: print(i,end=&quot; &quot;) if i == letter: #다시듣기 break ## d를 입력하면 d까지 찾고 출력멈춤. . 찾을 문자:c I h a v e a d r e a m . t = &#39;I have a dream&#39; letter =input(&#39;찾을 문자:&#39;) for i in t: print(i,end=&quot; &quot;) if i == letter and cnt = 0 : cnt =1 else: break ## d를 입력하면 d까지 찾고 출력멈춤. . File &#34;&lt;ipython-input-139-44280358ed07&gt;&#34;, line 6 if i == letter and cnt = 0 : ^ SyntaxError: invalid syntax . # 1~ 100사이의 정답 숫자를 랜덤으로 하나 정하고 정답숫자를 맞출때까지 숫자를 입력하는 게임이다. # 내가 입력한 숫자가 정답보다 작으면 &#39;down&#39;,정답보다 크면 &#39;up&#39;을 출력하고 숫자를 다시입력받는다. #정답을 맞추면 &#39;정답!&#39;이라고 출력하고 게임을 끝낸다. import random r= random.randint(1,100) p = int(input(&#39;예상숫자:&#39;)) while r != p: if r &gt; p: print(&#39;UP&#39;) p = int(input(&#39;예상숫자:&#39;)) elif r &lt; p: print(&#39;DOWN&#39;) p = int(input(&#39;예상숫자:&#39;)) print(f&#39;정답은 {r}이 었습니다.&#39;) . 예상숫자:100 DOWN 예상숫자:90 DOWN 예상숫자:80 DOWN 예상숫자:50 UP 예상숫자:60 DOWN 예상숫자:55 UP 예상숫자:56 정답은 56이 었습니다. . import random n = random.randint(1,100) answer = int(input(&#39;예상 숫자:&#39;)) while n != answer: if answer &gt; n: print(&#39;DOWN&#39;) answer = int(input(&#39;예상 숫자:&#39;)) elif answer &lt; n: print(&#39;UP&#39;) answer = int(input(&#39;예상 숫자:&#39;)) print(f&#39; 정답은 {n} 이었습니다.&#39;) . 예상 숫자:100 DOWN 예상 숫자:50 DOWN 예상 숫자:4 DOWN 예상 숫자:2 DOWN 예상 숫자:1 정답은 1 이었습니다. . import random n_answer = random.randint(1,100) n_inserted = int(input(&#39;숫자 입력: &#39;)) while n_inserted != n_answer: if n_inserted &lt; n_answer: print(&quot;DOWN&quot;) n_inserted = int(input(&#39;숫자 입력: &#39;)) else: print(&quot;UP&quot;) n_inserted = int(input(&#39;숫자 입력: &#39;)) print(n_answer, &quot;정답!&quot;) .",
            "url": "https://seonmk12.github.io/seonmins_colab/2021/06/06/_4%ED%8C%80_%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "relUrl": "/2021/06/06/_4%ED%8C%80_%EA%B9%80%EC%84%A0%EB%AF%BC.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seonmk12.github.io/seonmins_colab/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seonmk12.github.io/seonmins_colab/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seonmk12.github.io/seonmins_colab/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seonmk12.github.io/seonmins_colab/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}